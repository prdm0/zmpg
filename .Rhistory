n = 10000L,
f = dnorm,
continuous = TRUE,
args_pdf = list(mean = 0, sd = 1),
xlim = c(-4, 4)
) |>
hist(
main = "Generating Gaussian observations",
xlab = "x",
probability = TRUE
)
acceptance_rejection(
n = 10000L,
f = dnorm,
continuous = TRUE,
args_pdf = list(mean = 0, sd = 1),
xlim = c(-4, 4)
) |>
hist(
main = "Generating Gaussian observations",
xlab = "x",
probability = TRUE
)
library(zmpg)
acceptance_rejection(
n = 10000L,
f = dnorm,
continuous = TRUE,
args_pdf = list(mean = 0, sd = 1),
xlim = c(-4, 4)
) |>
hist(
main = "Generating Gaussian observations",
xlab = "x",
probability = TRUE
)
acceptance_rejection(
n = 10000L,
f = dnorm,
continuous = TRUE,
args_pdf = list(mean = 0, sd = 1),
xlim = c(-4, 4)
) |>
hist(
main = "Generating Gaussian observations",
xlab = "x",
probability = TRUE
)
acceptance_rejection(
n = 10000L,
f = dnorm,
continuous = TRUE,
args_pdf = list(mean = 0, sd = 1),
xlim = c(-4, 4),
parallel = TRUE
) |>
hist(
main = "Generating Gaussian observations",
xlab = "x",
probability = TRUE
)
pbmcapply::pbmclapply(
X = x,
FUN = pdf,
mc.cores = parallel::detectCores()
)
acceptance_rejection(
n = 10000L,
f = dnorm,
continuous = TRUE,
args_pdf = list(mean = 0, sd = 1),
xlim = c(-4, 4),
parallel = TRUE
) |>
hist(
main = "Generating Gaussian observations",
xlab = "x",
probability = TRUE
)
acceptance_rejection(
n = 10000L,
f = dnorm,
continuous = TRUE,
args_pdf = list(mean = 0, sd = 1),
xlim = c(-4, 4),
parallel = TRUE
) |>
hist(
main = "Generating Gaussian observations",
xlab = "x",
probability = TRUE
)
pbmcapply::pbmclapply(
X = x,
FUN = pdf_base,
mc.cores = parallel::detectCores()
) |> unlist()
b <- pbmcapply::pbmclapply(
X = x,
FUN = pdf_base,
mc.cores = parallel::detectCores()
) |> unlist()
a <- pbmcapply::pbmclapply(
X = x,
FUN = pdf,
mc.cores = parallel::detectCores()
) |> unlist()
a
b
purrr::map_dbl(.x = x, .f = pdf)
purrr::map_dbl(.x = x, .f = pdf_base)
library(zmpg)
acceptance_rejection(
n = 10000L,
f = dnorm,
continuous = TRUE,
args_pdf = list(mean = 0, sd = 1),
xlim = c(-4, 4),
parallel = TRUE
) |>
hist(
main = "Generating Gaussian observations",
xlab = "x",
probability = TRUE
)
acceptance_rejection(
n = 10000L,
f = dnorm,
continuous = TRUE,
args_pdf = list(mean = 0, sd = 1),
xlim = c(-4, 4),
parallel = TRUE
) |>
hist(
main = "Generating Gaussian observations",
xlab = "x",
probability = TRUE
)
acceptance_rejection(
n = 10000L,
f = dbeta,
continuous = TRUE,
args_pdf = list(shape1 = 0.1, sd = 0.5),
xlim = c(0, 1),
parallel = TRUE
) |>
hist(
main = "Generating Gaussian observations",
xlab = "x",
probability = TRUE
)
acceptance_rejection(
n = 10000L,
f = dbeta,
continuous = TRUE,
args_pdf = list(shape1 = 0.1, shape2 = 0.5),
xlim = c(0, 1),
parallel = TRUE
) |>
hist(
main = "Generating Gaussian observations",
xlab = "x",
probability = TRUE
)
acceptance_rejection(
n = 10000L,
f = dbeta,
continuous = TRUE,
args_pdf = list(shape1 = 0.01, shape2 = 0.5),
xlim = c(0, 1),
parallel = TRUE
) |>
hist(
main = "Generating Gaussian observations",
xlab = "x",
probability = TRUE
)
pkgdown::build_site()
acceptance_rejection(
n = 1000L,
f = dbeta,
continuous = TRUE,
args_pdf = list(shape1 = 0.01, shape2 = 0.5),
xlim = c(0, 1),
parallel = TRUE
) |>
hist(
main = "Generating Gaussian observations",
xlab = "x",
probability = TRUE
)
acceptance_rejection(
n = 1000L,
f = dbeta,
continuous = TRUE,
args_pdf = list(shape1 = 0.01, shape2 = 4.5),
xlim = c(0, 1),
parallel = TRUE
) |>
hist(
main = "Generating Gaussian observations",
xlab = "x",
probability = TRUE
)
acceptance_rejection(
n = 1000L,
f = dbeta,
continuous = TRUE,
args_pdf = list(shape1 = 10, shape2 = 4.5),
xlim = c(0, 1),
parallel = TRUE
) |>
hist(
main = "Generating Gaussian observations",
xlab = "x",
probability = TRUE
)
acceptance_rejection(
n = 1000L,
f = dbeta,
continuous = TRUE,
args_pdf = list(shape1 = 5, shape2 = 1),
xlim = c(0, 1),
parallel = TRUE
) |>
hist(
main = "Generating Gaussian observations",
xlab = "x",
probability = TRUE
)
acceptance_rejection(
n = 10000L,
f = dbeta,
continuous = TRUE,
args_pdf = list(shape1 = 5, shape2 = 1),
xlim = c(0, 1),
parallel = TRUE
) |>
hist(
main = "Generating Gaussian observations",
xlab = "x",
probability = TRUE
)
acceptance_rejection(
n = 10000L,
f = dbeta,
continuous = TRUE,
args_pdf = list(shape1 = 2, shape2 = 5),
xlim = c(0, 1),
parallel = TRUE
) |>
hist(
main = "Generating Gaussian observations",
xlab = "x",
probability = TRUE
)
acceptance_rejection(
n = 10000L,
f = dbeta,
continuous = TRUE,
args_pdf = list(shape1 = 0.5, shape2 = 0.5),
xlim = c(0, 1),
parallel = TRUE
) |>
hist(
main = "Generating Gaussian observations",
xlab = "x",
probability = TRUE
)
acceptance_rejection(
n = 10000L,
f = dbeta,
continuous = TRUE,
args_pdf = list(shape1 = 20, shape2 = 20),
xlim = c(0, 1),
parallel = TRUE
) |>
hist(
main = "Generating Gaussian observations",
xlab = "x",
probability = TRUE
)
acceptance_rejection(
n = 10000L,
f = dbeta,
continuous = TRUE,
args_pdf = list(shape1 = 10, shape2 = 10),
xlim = c(0, 1),
parallel = TRUE
) |>
hist(
main = "Generating Gaussian observations",
xlab = "x",
probability = TRUE
)
rbeta(10000, 20, 20) |> hist()
acceptance_rejection(
n = 10000L,
f = dbeta,
continuous = TRUE,
args_pdf = list(shape1 = 10, shape2 = 10),
xlim = c(0, 1),
parallel = TRUE
) |>
hist(
main = "Generating Gaussian observations",
xlab = "x",
probability = TRUE
)
acceptance_rejection(
n = 10000L,
f = dbeta,
continuous = TRUE,
args_pdf = list(shape1 = 0.0010, shape2 = 10),
xlim = c(0, 1),
parallel = TRUE
) |>
hist(
main = "Generating Gaussian observations",
xlab = "x",
probability = TRUE
)
acceptance_rejection(
n = 100L,
f = dbeta,
continuous = TRUE,
args_pdf = list(shape1 = 0.0010, shape2 = 10),
xlim = c(0, 1),
parallel = TRUE
) |>
hist(
main = "Generating Gaussian observations",
xlab = "x",
probability = TRUE
)
acceptance_rejection(
n = 2000L,
f = dbeta,
continuous = TRUE,
args_pdf = list(shape1 = 0.0010, shape2 = 10),
xlim = c(0, 1),
parallel = TRUE
) |>
hist(
main = "Generating Gaussian observations",
xlab = "x",
probability = TRUE
)
Sys.info()
restricao_rho <- function(mu, phi){
c(0, 1 / (1 - exp(-mu/(1 + mu * phi))))
}
restricao_rho(10.7, 4.5)
library(LambertW)
# install.packages("remotes")
# remotes::install_github("prdm0/zmpg", force = TRUE)
library(zmpg)
# Parametros verdadeiros
mu = 10.7
phi = 4.5
rho = 3.2
lambda = 1.4
invervalo_geracao <- c(0, 5)
restricao_rho <- function(mu, phi){
c(0, 1 / (1 - exp(-mu/(1 + mu * phi))))
}
# Densidade de Katy
pdf <- function(x, mu, phi, rho, lambda) {
s0 <- exp(-lambda * x)
delta <- (mu * phi)/(1 + mu * phi)
kapa <- LambertW::W(-delta * s0 * exp(-delta))
h0 <- lambda
-rho * h0 * exp(-1/phi * (kapa + delta))/phi * kapa/(1 + kapa)
}
# c <- integrate(
#   \(x) pdf(x, mu = mu, phi = phi, rho = rho, lambda = lambda),
#   lower = 0,
#   upper = 15
# )$value
#
# # Chegando a padronizacao
# integrate(
#   \(x) pdf(x, mu = mu, phi = phi, rho = rho, lambda = lambda)/c,
#   lower = 0,
#   upper = 15
# )
set.seed(0) # Garantindo reprodutibilidade
dados <- acceptance_rejection(
n = 5000L,
f = pdf, #\(...) pdf(...)/c,
continuous = TRUE,
args_pdf = list(mu = mu, phi = phi, rho = rho, lambda = lambda),
xlim = invervalo_geracao,
parallel = TRUE
)
x <- seq(invervalo_geracao[1L], invervalo_geracao[2L], length.out = 500L)
y <- pdf(x = x, mu = mu, phi = phi, rho = rho, lambda = lambda)/c
library(LambertW)
# install.packages("remotes")
# remotes::install_github("prdm0/zmpg", force = TRUE)
library(zmpg)
# Parametros verdadeiros
mu = 10.7
phi = 4.5
rho = 3.2
lambda = 1.4
invervalo_geracao <- c(0, 5)
restricao_rho <- function(mu, phi){
c(0, 1 / (1 - exp(-mu/(1 + mu * phi))))
}
# Densidade de Katy
pdf <- function(x, mu, phi, rho, lambda) {
s0 <- exp(-lambda * x)
delta <- (mu * phi)/(1 + mu * phi)
kapa <- LambertW::W(-delta * s0 * exp(-delta))
h0 <- lambda
-rho * h0 * exp(-1/phi * (kapa + delta))/phi * kapa/(1 + kapa)
}
set.seed(0) # Garantindo reprodutibilidade
dados <- acceptance_rejection(
n = 500L,
f = pdf, #\(...) pdf(...)/c,
continuous = TRUE,
args_pdf = list(mu = mu, phi = phi, rho = rho, lambda = lambda),
xlim = invervalo_geracao,
parallel = TRUE
)
hist(dados)
x <- seq(invervalo_geracao[1L], invervalo_geracao[2L], length.out = 500L)
y <- pdf(x = x, mu = mu, phi = phi, rho = rho, lambda = lambda)/c
x <- seq(invervalo_geracao[1L], invervalo_geracao[2L], length.out = 500L)
y <- pdf(x = x, mu = mu, phi = phi, rho = rho, lambda = lambda)
hist(
dados,
probability = TRUE,
ylim = c(0, 1.5)
)
# Plotando curva verdadeira sobre os dados gerado
lines(x, y, col = "red", lwd = 2)
likelihood <- function(x, mu, phi, rho, lambda){
-sum(log(pdf(x = x, mu = mu, phi = phi, rho = rho, lambda = lambda)))
}
optim(
par = c(1),
fn = \(theta) likelihood(x = dados, mu = mu, phi = phi, rho = rho, lambda = theta),
method = "L-BFGS-B",
lower = 0,
upper = 10
)$par
library(LambertW)
# install.packages("remotes")
# remotes::install_github("prdm0/zmpg", force = TRUE)
library(zmpg)
# Parametros verdadeiros
mu = 10.7
phi = 4.5
rho = 3.2
lambda = 1.4
invervalo_geracao <- c(0, 5)
restricao_rho <- function(mu, phi){
c(0, 1 / (1 - exp(-mu/(1 + mu * phi))))
}
# Densidade de Katy
pdf <- function(x, mu, phi, rho, lambda) {
s0 <- exp(-lambda * x)
delta <- (mu * phi)/(1 + mu * phi)
kapa <- LambertW::W(-delta * s0 * exp(-delta))
h0 <- lambda
-rho * h0 * exp(-1/phi * (kapa + delta))/phi * kapa/(1 + kapa)
}
# c <- integrate(
#   \(x) pdf(x, mu = mu, phi = phi, rho = rho, lambda = lambda),
#   lower = 0,
#   upper = 15
# )$value
#
# # Chegando a padronizacao
# integrate(
#   \(x) pdf(x, mu = mu, phi = phi, rho = rho, lambda = lambda)/c,
#   lower = 0,
#   upper = 15
# )
set.seed(0) # Garantindo reprodutibilidade
dados <- acceptance_rejection(
n = 500L,
f = pdf, #\(...) pdf(...)/c,
continuous = TRUE,
args_pdf = list(mu = mu, phi = phi, rho = rho, lambda = lambda),
xlim = invervalo_geracao,
parallel = TRUE
)
x <- seq(invervalo_geracao[1L], invervalo_geracao[2L], length.out = 500L)
y <- pdf(x = x, mu = mu, phi = phi, rho = rho, lambda = lambda)
hist(
dados,
probability = TRUE,
ylim = c(0, 1.5)
)
# Plotando curva verdadeira sobre os dados gerado
lines(x, y, col = "red", lwd = 2)
# zmpg_exp <- zmpg::pdf_fragility_zmpg(dexp)
likelihood <- function(x, mu, phi, rho, lambda){
-sum(log(pdf(x = x, mu = mu, phi = phi, rho = rho, lambda = lambda)))
}
optim(
par = c(1),
fn = \(theta) likelihood(x = dados, mu = mu, phi = theta, rho = rho, lambda = lambda),
method = "L-BFGS-B",
lower = 0,
upper = 10
)$par
remotes::install_github("rjournal/rjtools")
