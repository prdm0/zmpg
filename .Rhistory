base_generator <- \(n) sample(x = xlim[1L]:xlim[2L], size = (xlim[2L] - xlim[1L]), replace = TRUE)
x <- max(pdf_base(xlim[1L]:xlim[2L]) / pdf(xlim[1L]:xlim[2L]))
x
pdf_base(xlim[1L]:xlim[2L])
pdf(xlim[1L]:xlim[2L])
pdf
xlim[1L]:xlim[2L]
xlim[1L]:xlim[2L]
pdf_base
pdf_base()
pdf_base(c(0.1, 0.2))
1/ (xlim[2L] - xlim[1L])
rep(1/ (xlim[2L] - xlim[1L]))
rep(1/ (xlim[2L] - xlim[1L]), size = length(x))
rep(1/ (xlim[2L] - xlim[1L]), size = xlim[1]:xlim[2])
rep(1/ (xlim[2L] - xlim[1L]), size = length(xlim[1]:xlim[2]))
rep(1/ (xlim[2L] - xlim[1L]), times = length(xlim[1]:xlim[2]))
step <- 1L
pdf_base <- \(x) rep(1/ (xlim[2L] - xlim[1L]), times = length(xlim[1]:xlim[2]))
base_generator <- \(n) sample(x = xlim[1L]:xlim[2L], size = (xlim[2L] - xlim[1L]), replace = TRUE)
step <- 1L
pdf_base <- \(x) rep(1/ (xlim[2L] - xlim[1L]), times = length(xlim[1]:xlim[2]))
base_generator <- \(n) sample(x = xlim[1L]:xlim[2L], size = (xlim[2L] - xlim[1L]), replace = TRUE)
base_generator()
base_generator(n = 10)
base_generator(n = 100)
step <- 1L
pdf_base <- \(x) rep(1/ (xlim[2L] - xlim[1L]), times = length(xlim[1]:xlim[2]))
base_generator <- \(n) sample(x = xlim[1L]:xlim[2L], size = length(xlim[2L] - xlim[1L]), replace = TRUE)
base_generator(n = 100)
xlim[1L]:xlim[2L]
step <- 1L
pdf_base <- \(x) rep(1/ (xlim[2L] - xlim[1L]), times = length(xlim[1]:xlim[2]))
base_generator <- \(n) sample(x = xlim[1L]:xlim[2L], size = n, replace = TRUE)
pdf_base()
pdf_base(10)
pdf_base(100)
rep(1/ (xlim[2L] - xlim[1L]), times = length(xlm[1L]:xlim[2L]))
xlim
step <- 1L
pdf_base <- \(x) rep(1/ (xlim[2L] - xlim[1L]), times = length(xlim[1L]:xlim[2L]))
pdf_base
pdf_base()
pdf_base() |> sum()
pdf_base <- \(x) rep(1/ (xlim[2L] - xlim[1L]), times = length(xlim[1L]:xlim[2L]) - 1L)
pdf_base()
step <- 1L
pdf_base <- \(x) rep(1/ (xlim[2L] - xlim[1L]), times = length(xlim[1L]:xlim[2L]) - 1L)
base_generator <- \() sample(x = xlim[1L]:xlim[2L], size = n, replace = TRUE)
Â´df_base()
df_base()
pdf_base()
gene
step <- 1L
pdf_base <- \(x) rep(1/ (xlim[2L] - xlim[1L]), times = length(xlim[1L]:xlim[2L]) - 1L)
base_generator <- \(n) sample(x = xlim[1L]:xlim[2L], size = n, replace = TRUE)
pdf_base()
pdf_base(1)
pdf_base <- \(x) 1/ (xlim[2L] - xlim[1L] + 1)
pdf_base(1)
1/10
(xlim[2L] - xlim[1L] - 1)
1/10
(xlim[2L] - xlim[1L] + 1)
(xlim[2L] - xlim[1L] - 1)
(xlim[2L] - xlim[1L] - 1)
(xlim[2L] - xlim[1L] + 1)
xlim[2L] - xlim[1L]
(xlim[2L] - xlim[1L])
step <- 1L
pdf_base <- \(x) 1/ (xlim[2L] - xlim[1L])
pdf_base(1)
pdf_base(10)
step <- 1L
pdf_base <- \(x) 1/ (xlim[2L] - xlim[1L])
base_generator <- \(n) sample(x = xlim[1L]:xlim[2L], size = n, replace = TRUE)
pdf_base(xlim[1L]:xlim[2L]
)
pdf_base(xlim[1L]:xlim[2L])
pdf(xlim[1L]:xlim[2L])
pdf_base(c(1,2))
pdf_base
pdf_base <- purrr::partial(.f = dunif, min = xlim[1L], max = xlim[2L])
pdf_base(0.2)
pdf_base(0.54)
a <- purrr::map_dbl(.x = seq(from = xlim[1L], to = xlim[2L], by = step), .f = pdf)
a
a |> sum()
step <- 1L
pdf_base <- \(x) 1/ (xlim[2L] - xlim[1L])
base_generator <- \(n) sample(x = xlim[1L]:xlim[2L], size = n, replace = TRUE)
b <- purrr::map_dbl(.x = seq(from = xlim[1L], to = xlim[2L], by = step), .f = pdf_base)
step <- 1L
pdf_base <- \(x) 1/ (xlim[2L] - xlim[1L])
base_generator <- \(n) sample(x = xlim[1L]:xlim[2L], size = n, replace = TRUE)
a <- purrr::map_dbl(.x = seq(from = xlim[1L], to = xlim[2L], by = step), .f = pdf)
b <- purrr::map_dbl(.x = seq(from = xlim[1L], to = xlim[2L], by = step), .f = pdf_base)
a
b
a <- purrr::map_dbl(.x = seq(from = xlim[1L], to = xlim[2L], by = step), .f = pdf)
b <- purrr::map_dbl(.x = seq(from = xlim[1L], to = xlim[2L], by = step), .f = pdf_base)
x <- max(a/b)
x
library(zmpg)
?acceptance_rejection
acceptance_rejection(
n = 25L,
f = dbinom,
continuous = FALSE,
args_pdf = list(size = 5, prob = 0.5),
xlim = c(0, 10),
c = 25
) |>
table() |>
barplot(main = "Generating Binomial observations")
acceptance_rejection(
n = 25L,
f = dbinom,
continuous = FALSE,
args_pdf = list(size = 5, prob = 0.5),
xlim = c(0, 10),
c = 25
) |>
table() |>
barplot(main = "Generating Binomial observations")
acceptance_rejection(
n = 25L,
f = dbinom,
continuous = FALSE,
args_pdf = list(size = 5, prob = 0.5),
xlim = c(0, 10)
) |>
table() |>
barplot(main = "Generating Binomial observations")
acceptance_rejection(
n = 1000L,
f = dnorm,
continuous = TRUE,
args_pdf = list(mean = 0, sd = 1),
xlim = c(-4, 4)
) |>
hist(
main = "Generating Gaussian observations",
xlab = "x",
probability = TRUE
)
library(zmpg)
acceptance_rejection(
n = 1000L,
f = dnorm,
continuous = TRUE,
args_pdf = list(mean = 0, sd = 1),
xlim = c(-4, 4)
) |>
hist(
main = "Generating Gaussian observations",
xlab = "x",
probability = TRUE
)
acceptance_rejection(
n = 100L,
f = dnorm,
continuous = TRUE,
args_pdf = list(mean = 0, sd = 1),
xlim = c(-4, 4)
) |>
hist(
main = "Generating Gaussian observations",
xlab = "x",
probability = TRUE
)
acceptance_rejection(
n = 1000L,
f = dnorm,
continuous = TRUE,
args_pdf = list(mean = 0, sd = 1),
xlim = c(-4, 4)
) |>
hist(
main = "Generating Gaussian observations",
xlab = "x",
probability = TRUE
)
acceptance_rejection(
n = 1000L,
f = dnorm,
continuous = TRUE,
args_pdf = list(mean = 0, sd = 1),
xlim = c(-4, 4),
parallel = TRUE
) |>
hist(
main = "Generating Gaussian observations",
xlab = "x",
probability = TRUE
)
acceptance_rejection(
n = 10000L,
f = dnorm,
continuous = TRUE,
args_pdf = list(mean = 0, sd = 1),
xlim = c(-4, 4),
parallel = TRUE
) |>
hist(
main = "Generating Gaussian observations",
xlab = "x",
probability = TRUE
)
acceptance_rejection(
n = 25L,
f = dbinom,
continuous = FALSE,
args_pdf = list(size = 5, prob = 0.5),
xlim = c(0, 10),
c = 25
) |>
table() |>
barplot(main = "Generating Binomial observations")
acceptance_rejection(
n = 25L,
f = dbinom,
continuous = FALSE,
args_pdf = list(size = 5, prob = 0.5),
xlim = c(0, 10)
) |>
table() |>
barplot(main = "Generating Binomial observations")
step <- 1L
pdf_base <- \(x) 1/ (xlim[2L] - xlim[1L])
xlim
step <- 1L
pdf_base <- \(x) 1/ (xlim[2L] - xlim[1L])
pdf_base(1)
pdf_base(10)
base_generator <- \(n) sample(x = xlim[1L]:xlim[2L], size = n, replace = TRUE)
base_generator()
base_generator(10000)
base_generator(10000) == 5
(base_generator(10000) == 5) |> sum()
(base_generator(10000) == 5) |> sum()
pdf_base <- \(x) 1/ (xlim[2L] - xlim[1L])
pdf_base
pdf_base()
xlim[1L]:xlim[2L]
xlim[2L] - xlim[1L]
(xlim[2L] - xlim[1L] + 1)
sample(x = xlim[1L]:xlim[2L], size = n, replace = TRUE)
step <- 1L
pdf_base <- \(x) 1/ (xlim[2L] - xlim[1L] + 1)
base_generator <- \(n) sample(x = xlim[1L]:xlim[2L], size = n, replace = TRUE)
base_generator(1000)
base_generator(1000) |> table()
base_generator(1000) |> table()
f <- base_generator(1000) |> table()
f/1000
1/11
step <- 1L
pdf_base <- \(x) 1/ (xlim[2L] - xlim[1L] + 1)
base_generator <- \(n) sample(x = xlim[1L]:xlim[2L], size = n, replace = TRUE)
a <- purrr::map_dbl(.x = seq(from = xlim[1L], to = xlim[2L], by = step), .f = pdf)
a
a |> sum()
seq(from = xlim[1L], to = xlim[2L], by = step)
purrr::map_dbl(.x = seq(from = xlim[1L], to = xlim[2L], by = step), .f = pdf)
purrr::map_dbl(.x = seq(from = xlim[1L], to = xlim[2L], by = step), .f = pdf_base)
a <- purrr::map_dbl(.x = seq(from = xlim[1L], to = xlim[2L], by = step), .f = pdf)
b <- purrr::map_dbl(.x = seq(from = xlim[1L], to = xlim[2L], by = step), .f = pdf_base)
x <- max(b/a)
x
a <- purrr::map_dbl(.x = seq(from = xlim[1L], to = xlim[2L], by = step), .f = pdf)
b <- purrr::map_dbl(.x = seq(from = xlim[1L], to = xlim[2L], by = step), .f = pdf_base)
x <- max(b/a)
if(is.infinite(x)) x <- .Machine$double.xmax
x
library(zmpg)
?acceptance_rejection
acceptance_rejection(
n = 1000L,
f = dnorm,
continuous = TRUE,
args_pdf = list(mean = 0, sd = 1),
xlim = c(-4, 4)
) |>
hist(
main = "Generating Gaussian observations",
xlab = "x",
probability = TRUE
)
acceptance_rejection(
n = 25L,
f = dbinom,
continuous = FALSE,
args_pdf = list(size = 5, prob = 0.5),
xlim = c(0, 10),
c = 25
) |>
table() |>
barplot(main = "Generating Binomial observations")
acceptance_rejection(
n = 25L,
f = dbinom,
continuous = FALSE,
args_pdf = list(size = 5, prob = 0.5),
xlim = c(0, 10)
) |>
table() |>
barplot(main = "Generating Binomial observations")
x
step <- 1L
pdf_base <- \(x) 1/ (xlim[2L] - xlim[1L] + 1)
base_generator <- \(n) sample(x = xlim[1L]:xlim[2L], size = n, replace = TRUE)
a <- purrr::map_dbl(.x = seq(from = xlim[1L], to = xlim[2L], by = step), .f = pdf)
b <- purrr::map_dbl(.x = seq(from = xlim[1L], to = xlim[2L], by = step), .f = pdf_base)
a
b
b/a
b/a < Inf
(b/a)[b/a < Inf]
library(zmpg)
library(zmpg)
barplot(main = "Generating Binomial observations")
acceptance_rejection(
n = 25L,
f = dbinom,
continuous = FALSE,
args_pdf = list(size = 5, prob = 0.5),
xlim = c(0, 10),
c = 25
)
acceptance_rejection(
n = 25L,
f = dbinom,
continuous = FALSE,
args_pdf = list(size = 5, prob = 0.5),
xlim = c(0, 10),
c = 25
) |>
table() |>
barplot(main = "Generating Binomial observations")
acceptance_rejection(
n = 500L,
f = dbinom,
continuous = FALSE,
args_pdf = list(size = 5, prob = 0.5),
xlim = c(0, 10),
c = 25
) |>
table() |>
barplot(main = "Generating Binomial observations")
acceptance_rejection(
n = 500L,
f = dbinom,
continuous = FALSE,
args_pdf = list(size = 5, prob = 0.5),
xlim = c(0, 2),
c = 25
) |>
table() |>
barplot(main = "Generating Binomial observations")
acceptance_rejection(
n = 500L,
f = dbinom,
continuous = FALSE,
args_pdf = list(size = 5, prob = 0.5),
xlim = c(0, 20),
c = 25
) |>
table() |>
barplot(main = "Generating Binomial observations")
acceptance_rejection(
n = 500L,
f = dbinom,
continuous = FALSE,
args_pdf = list(size = 5, prob = 0.5),
xlim = c(0, 20)
) |>
table() |>
barplot(main = "Generating Binomial observations")
barplot(main = "Generating Binomial observations")
rm(list=ls())
library(zmpg)
barplot(main = "Generating Binomial observations")
barplot(main = "Generating Binomial observations")
objective_c <- function(c) {
differences <-
(pdf(x) - c * pdf_base(x))^2
}
library(zmpg)
barplot(main = "Generating Binomial observations")
library(zmpg)
barplot(main = "Generating Binomial observations")
library(zmpg)
barplot(main = "Generating Binomial observations")
set.seed(0) # setting a seed for reproducibility
acceptance_rejection(
n = 25L,
f = dbinom,
continuous = FALSE,
args_pdf = list(size = 5, prob = 0.5),
xlim = c(0, 10),
c = 25
) |>
table() |>
barplot(main = "Generating Binomial observations")
acceptance_rejection(
n = 1000L,
f = dnorm,
continuous = TRUE,
args_pdf = list(mean = 0, sd = 1),
xlim = c(-4, 4)
) |>
hist(
main = "Generating Gaussian observations",
xlab = "x",
probability = TRUE
)
library(zmpg)
acceptance_rejection(
n = 1000L,
f = dnorm,
continuous = TRUE,
args_pdf = list(mean = 0, sd = 1),
xlim = c(-4, 4)
) |>
hist(
main = "Generating Gaussian observations",
xlab = "x",
probability = TRUE
)
acceptance_rejection(
n = 1000L,
f = dnorm,
continuous = TRUE,
args_pdf = list(mean = 0, sd = 1),
xlim = c(-4, 4)
) |>
hist(
main = "Generating Gaussian observations",
xlab = "x",
probability = TRUE
)
acceptance_rejection(
n = 10000L,
f = dnorm,
continuous = TRUE,
args_pdf = list(mean = 0, sd = 1),
xlim = c(-4, 4),
parallel = TRUE
) |>
hist(
main = "Generating Gaussian observations",
xlab = "x",
probability = TRUE
)
acceptance_rejection(
n = 100000L,
f = dnorm,
continuous = TRUE,
args_pdf = list(mean = 0, sd = 1),
xlim = c(-4, 4),
parallel = TRUE
) |>
hist(
main = "Generating Gaussian observations",
xlab = "x",
probability = TRUE
)
acceptance_rejection(
n = 25L,
f = dbinom,
continuous = FALSE,
args_pdf = list(size = 5, prob = 0.5),
xlim = c(0, 10),
c = 25
) |>
table() |>
barplot(main = "Generating Binomial observations")
acceptance_rejection(
n = 25L,
f = dbinom,
continuous = FALSE,
args_pdf = list(size = 5, prob = 0.5),
xlim = c(0, 10)
) |>
table() |>
barplot(main = "Generating Binomial observations")
warnings
warnings()
x <- max((b/a)[!is.infinite(b/a)])
objective_c <- function(c) {
differences <-
(pdf(x) - c * pdf_base(x))^2
}
n = 25L;
f = dbinom;
continuous = FALSE;
args_pdf = list(size = 5, prob = 0.5);
xlim = c(0, 10)
c = NULL
pdf <- purrr::partial(.f = f, !!!args_pdf)
f
pdf(1)
pdf(10)
step <- 1L
pdf_base <- \(x) 1/ (xlim[2L] - xlim[1L] + 1)
base_generator <- \(n) sample(x = xlim[1L]:xlim[2L], size = n, replace = TRUE)
a <- purrr::map_dbl(.x = seq(from = xlim[1L], to = xlim[2L], by = step), .f = pdf)
a
b <- purrr::map_dbl(.x = seq(from = xlim[1L], to = xlim[2L], by = step), .f = pdf_base)
b
max((b/a)[!is.infinite(b/a)])
