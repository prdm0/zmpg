# Otimização --------------------------------------------------------------
# emv_1 <-
#   pso::psoptim(
#     par = c(0.5, 0.5, 0.5, 0.5),
#     fn = function(par) log_likelihood(x = dados, theta = par[1L], lambda = par[2L], rho = par[3L], rate = par[4L]),
#     lower = c(0.001, 0.001, 0.001, 0.001),
#     upper = c(20, 1, 1/(1-exp(-20)), 20),
#     control=list(type = "SPSO2007")
#   )
#
# emv_2 <-
#   DEoptim::DEoptim(
#     fn = function(par) log_likelihood(x = dados, theta = par[1L], lambda = par[2L], rho = par[3L], rate = par[4L]),
#     lower = c(0.001, 0.001, 0.001, 0.001),
#     upper = c(20, 0.6991829, 1/(1-exp(-20)), 20),
#     control = DEoptim.control(trace = FALSE, strategy = 3)
#   )$optim
emv_3 <-
optim(
par = c(0.5, 0.5, 0.5, 0.5),
fn = function(par) log_likelihood(x = dados, theta = par[1L], lambda = par[2L], rho = par[3L], rate = par[4L]),
method = "L-BFGS-B",
lower = c(0.001, 0.001, 0.001, 0.001),
upper = c(20, 1, 20, 20)
)
# Resultados --------------------------------------------------------------
# Função de sobrevivência
s <- survival_function(pdf)
# Fração de cura observada
s_lim <- s(t = 100, theta = emv_3$par[1L], lambda = emv_3$par[2L], rho = 1, rate = emv_3$par[4L])
rho_est <- (s_lim - 1)/(exp(-emv_3$par[1L]) - 1)
s_lim <-   1 - rho_est + rho_est * exp(-emv_3$par[1L])
cat(" -- Parametros Verdadeiros --\n")
cat("--> Theta: ", theta, "\n")
cat("--> Lambda: ", lambda, "\n")
cat("--> Rate: ", rate, "\n")
cat(" -- Estimativas de EMV --\n")
cat("Theta: ", emv_3$par[1L], "\n")
cat("Lambda: ", emv_3$par[2L], "\n")
cat("Rho: ", rho_est, "\n")
cat("Rate: ", emv_3$par[4L], "\n")
cat("Fração de cura do modelo: ", 1 - rho_est + rho_est * exp(-emv_3$par[1L]), "\n")
# Gráficos ---------------------------------------------------------------
x <- seq(min(dados), max(dados), length.out = 1000L)
y <- pdf(x = x, theta = emv_3$par[1L], lambda = emv_3$par[2L], rho = rho_est, rate = emv_3$par[4L])
hist(dados, probability = TRUE, breaks = 50, main = "Histograma dos dados")
lines(x, y, col = "red", lwd = 2)
rho_est
# install.packages("remotes")
# remotes::install_github("prdm0/zmpg", force = TRUE)
library(zmpg)
rm(list = ls(all = TRUE))
# Função quantílica da densidade imprópria ZMPG ---------------------------
qzmpg <- function(q_base){
function(n, theta, lambda, rho, ...){
assertthat::assert_that(
theta > 0,
msg = "The parameter 'theta' must be positive."
)
assertthat::assert_that(
lambda > 0 && lambda <=1 ,
msg = "The parameter 'lambda' must be positive and less than or equal to 1."
)
assertthat::assert_that(
rho > 0 && rho <= 1/(1-exp(-theta)),
msg = "The parameter 'rho' must be positive and less than or equal to 1."
)
u <- runif(n = n, min = 0, max = rho * (1 - exp(-theta)))
point <-
1 - exp(lambda) * (1/theta * log(1 - u/rho) + 1) *
exp(-lambda * (1/theta * log(1 - u/rho) + 1))
q_base(point, ...)
}
}
q_zmpg_exp <- qzmpg(q_base = qexp)
# Parametros verdadeiros
theta =  10.7
lambda = 0.3
rho = 0.5 # Não importa o rho, ele é anulado na verossimilhança
rate = 0.1
pdf <- function(x, theta, lambda, rho, rate) {
s0 <- exp(-rate * x)
h0 <- rate
arg_lambert <- -lambda * s0 * exp(-lambda)
kapa <- LambertW::W(arg_lambert)
r <-  -rho * theta * h0 * exp((-theta/lambda) * (kapa + lambda))/lambda * kapa/(1 + kapa)
attr(r, "arg_lambert") <- arg_lambert
return(r)
}
# Integral da densidade
c = integrate(pdf, lower = 0, upper = Inf, theta = theta, lambda = lambda, rho = rho, rate = rate)$value
# Garantindo reprodutibilidade
set.seed(0)
q_zmpg_exp <- qzmpg(q_base = qexp)
dados <-
q_zmpg_exp(
n = 5000L,
theta = theta,
lambda = lambda,
rho = rho,
rate = rate
)
# log_likelihood <- function(x, theta, lambda, rho, rate){
#   normalization_constant <- 1/(rho * (1 - exp(-theta)))
#   obj <-
#     pdf(x = x, theta = theta, lambda = lambda, rho = rho, rate = rate) *
#     normalization_constant
#   arg_lambert <- attr(obj, "arg_lambert")
#
#   if(lambda > 1) return(Inf)
#   else if(rho > 1/(1-exp(-theta))) return(Inf)
#   else if(any(arg_lambert < -1/exp(1))) return(Inf)
#   else if(any(c(theta, lambda, rate) <= 0)) return(Inf)
#   else return(-s <- survival_function(pdf)
# s_lim <-  s(t = 2000, theta = emv_3$par[1L], lambda = emv_3$par[2L], rho = emv_3$par[3L], rate = emv_3$par[4L])sum(log(obj)))
# }
log_likelihood <- function(x, theta, lambda, rho, rate){
normalization_constant <- 1/(rho * (1 - exp(-theta)))
obj <-
pdf(x = x, theta = theta, lambda = lambda, rho = rho, rate = rate) *
normalization_constant
arg_lambert <- attr(obj, "arg_lambert")
#if(lambda > 1) return(Inf)
#else if(rho > 1/(1-exp(-theta))) return(Inf)
#else if(any(arg_lambert < -1/exp(1))) return(Inf)
#else if(any(c(theta, lambda, rate) <= 0)) return(Inf)
# Defina os valores de alpha e l1_ratio dentro da função
alpha <- 0.25
l1_ratio <- 0.5
# Adicione um termo de penalidade Elastic Net
l1_penalty <- l1_ratio * (theta + lambda + rho + rate)
l2_penalty <- (1 - l1_ratio) * (theta^2 + lambda^2 + rho^2 + rate^2)
penalty <- alpha * (l1_penalty + l2_penalty)
return(-sum(log(obj)) + penalty)
}
# Otimização --------------------------------------------------------------
# emv_1 <-
#   pso::psoptim(
#     par = c(0.5, 0.5, 0.5, 0.5),
#     fn = function(par) log_likelihood(x = dados, theta = par[1L], lambda = par[2L], rho = par[3L], rate = par[4L]),
#     lower = c(0.001, 0.001, 0.001, 0.001),
#     upper = c(20, 1, 1/(1-exp(-20)), 20),
#     control=list(type = "SPSO2007")
#   )
#
# emv_2 <-
#   DEoptim::DEoptim(
#     fn = function(par) log_likelihood(x = dados, theta = par[1L], lambda = par[2L], rho = par[3L], rate = par[4L]),
#     lower = c(0.001, 0.001, 0.001, 0.001),
#     upper = c(20, 0.6991829, 1/(1-exp(-20)), 20),
#     control = DEoptim.control(trace = FALSE, strategy = 3)
#   )$optim
emv_3 <-
optim(
par = c(0.5, 0.5, 0.5, 0.5),
fn = function(par) log_likelihood(x = dados, theta = par[1L], lambda = par[2L], rho = par[3L], rate = par[4L]),
method = "L-BFGS-B",
lower = c(0.001, 0.001, 0.001, 0.001),
upper = c(20, 1, 20, 20)
)
# Resultados --------------------------------------------------------------
# Função de sobrevivência
s <- survival_function(pdf)
# Fração de cura observada
s_lim <- s(t = 100, theta = emv_3$par[1L], lambda = emv_3$par[2L], rho = 1, rate = emv_3$par[4L])
rho_est <- (s_lim - 1)/(exp(-emv_3$par[1L]) - 1)
s_lim <-   1 - rho_est + rho_est * exp(-emv_3$par[1L])
cat(" -- Parametros Verdadeiros --\n")
cat("--> Theta: ", theta, "\n")
cat("--> Lambda: ", lambda, "\n")
cat("--> Rate: ", rate, "\n")
cat(" -- Estimativas de EMV --\n")
cat("Theta: ", emv_3$par[1L], "\n")
cat("Lambda: ", emv_3$par[2L], "\n")
cat("Rho: ", rho_est, "\n")
cat("Rate: ", emv_3$par[4L], "\n")
cat("Fração de cura do modelo: ", 1 - rho_est + rho_est * exp(-emv_3$par[1L]), "\n")
# Gráficos ---------------------------------------------------------------
x <- seq(min(dados), max(dados), length.out = 1000L)
y <- pdf(x = x, theta = emv_3$par[1L], lambda = emv_3$par[2L], rho = 1, rate = emv_3$par[4L])
hist(dados, probability = TRUE, breaks = 50, main = "Histograma dos dados")
lines(x, y, col = "red", lwd = 2)
rho_est
# install.packages("remotes")
# remotes::install_github("prdm0/zmpg", force = TRUE)
library(zmpg)
rm(list = ls(all = TRUE))
# Função quantílica da densidade imprópria ZMPG ---------------------------
qzmpg <- function(q_base){
function(n, theta, lambda, rho, ...){
assertthat::assert_that(
theta > 0,
msg = "The parameter 'theta' must be positive."
)
assertthat::assert_that(
lambda > 0 && lambda <=1 ,
msg = "The parameter 'lambda' must be positive and less than or equal to 1."
)
assertthat::assert_that(
rho > 0 && rho <= 1/(1-exp(-theta)),
msg = "The parameter 'rho' must be positive and less than or equal to 1."
)
u <- runif(n = n, min = 0, max = rho * (1 - exp(-theta)))
point <-
1 - exp(lambda) * (1/theta * log(1 - u/rho) + 1) *
exp(-lambda * (1/theta * log(1 - u/rho) + 1))
q_base(point, ...)
}
}
q_zmpg_exp <- qzmpg(q_base = qexp)
# Parametros verdadeiros
theta =  10.7
lambda = 0.3
rho = 0.5 # Não importa o rho, ele é anulado na verossimilhança
rate = 0.1
pdf <- function(x, theta, lambda, rho, rate) {
s0 <- exp(-rate * x)
h0 <- rate
arg_lambert <- -lambda * s0 * exp(-lambda)
kapa <- LambertW::W(arg_lambert)
r <-  -rho * theta * h0 * exp((-theta/lambda) * (kapa + lambda))/lambda * kapa/(1 + kapa)
attr(r, "arg_lambert") <- arg_lambert
return(r)
}
# Integral da densidade
c = integrate(pdf, lower = 0, upper = Inf, theta = theta, lambda = lambda, rho = rho, rate = rate)$value
# Garantindo reprodutibilidade
set.seed(0)
q_zmpg_exp <- qzmpg(q_base = qexp)
dados <-
q_zmpg_exp(
n = 5000L,
theta = theta,
lambda = lambda,
rho = rho,
rate = rate
)
# log_likelihood <- function(x, theta, lambda, rho, rate){
#   normalization_constant <- 1/(rho * (1 - exp(-theta)))
#   obj <-
#     pdf(x = x, theta = theta, lambda = lambda, rho = rho, rate = rate) *
#     normalization_constant
#   arg_lambert <- attr(obj, "arg_lambert")
#
#   if(lambda > 1) return(Inf)
#   else if(rho > 1/(1-exp(-theta))) return(Inf)
#   else if(any(arg_lambert < -1/exp(1))) return(Inf)
#   else if(any(c(theta, lambda, rate) <= 0)) return(Inf)
#   else return(-s <- survival_function(pdf)
# s_lim <-  s(t = 2000, theta = emv_3$par[1L], lambda = emv_3$par[2L], rho = emv_3$par[3L], rate = emv_3$par[4L])sum(log(obj)))
# }
log_likelihood <- function(x, theta, lambda, rho, rate){
normalization_constant <- 1/(rho * (1 - exp(-theta)))
obj <-
pdf(x = x, theta = theta, lambda = lambda, rho = rho, rate = rate) *
normalization_constant
arg_lambert <- attr(obj, "arg_lambert")
#if(lambda > 1) return(Inf)
#else if(rho > 1/(1-exp(-theta))) return(Inf)
#else if(any(arg_lambert < -1/exp(1))) return(Inf)
#else if(any(c(theta, lambda, rate) <= 0)) return(Inf)
# Defina os valores de alpha e l1_ratio dentro da função
alpha <- 0.25
l1_ratio <- 0.5
# Adicione um termo de penalidade Elastic Net
l1_penalty <- l1_ratio * (theta + lambda + rho + rate)
l2_penalty <- (1 - l1_ratio) * (theta^2 + lambda^2 + rho^2 + rate^2)
penalty <- alpha * (l1_penalty + l2_penalty)
return(-sum(log(obj)) + penalty)
}
# Otimização --------------------------------------------------------------
# emv_1 <-
#   pso::psoptim(
#     par = c(0.5, 0.5, 0.5, 0.5),
#     fn = function(par) log_likelihood(x = dados, theta = par[1L], lambda = par[2L], rho = par[3L], rate = par[4L]),
#     lower = c(0.001, 0.001, 0.001, 0.001),
#     upper = c(20, 1, 1/(1-exp(-20)), 20),
#     control=list(type = "SPSO2007")
#   )
#
# emv_2 <-
#   DEoptim::DEoptim(
#     fn = function(par) log_likelihood(x = dados, theta = par[1L], lambda = par[2L], rho = par[3L], rate = par[4L]),
#     lower = c(0.001, 0.001, 0.001, 0.001),
#     upper = c(20, 0.6991829, 1/(1-exp(-20)), 20),
#     control = DEoptim.control(trace = FALSE, strategy = 3)
#   )$optim
emv_3 <-
optim(
par = c(0.5, 0.5, 0.5, 0.5),
fn = function(par) log_likelihood(x = dados, theta = par[1L], lambda = par[2L], rho = par[3L], rate = par[4L]),
method = "L-BFGS-B",
lower = c(0.001, 0.001, 0.001, 0.001),
upper = c(20, 1, 20, 20)
)
# Resultados --------------------------------------------------------------
# Função de sobrevivência
s <- survival_function(pdf)
# Fração de cura observada
s_lim <- s(t = 100, theta = emv_3$par[1L], lambda = emv_3$par[2L], rho = 1, rate = emv_3$par[4L])
rho_est <- (s_lim - 1)/(exp(-emv_3$par[1L]) - 1)
s_lim <-   1 - rho_est + rho_est * exp(-emv_3$par[1L])
cat(" -- Parametros Verdadeiros --\n")
cat("--> Theta: ", theta, "\n")
cat("--> Lambda: ", lambda, "\n")
cat("--> Rate: ", rate, "\n")
cat(" -- Estimativas de EMV --\n")
cat("Theta: ", emv_3$par[1L], "\n")
cat("Lambda: ", emv_3$par[2L], "\n")
cat("Rho: ", rho_est, "\n")
cat("Rate: ", emv_3$par[4L], "\n")
cat("Fração de cura do modelo: ", 1 - rho_est + rho_est * exp(-emv_3$par[1L]), "\n")
# Gráficos ---------------------------------------------------------------
x <- seq(min(dados), max(dados), length.out = 1000L)
y <- pdf(x = x, theta = emv_3$par[1L], lambda = emv_3$par[2L], rho = 1, rate = emv_3$par[4L])
hist(dados, probability = TRUE, breaks = 50, main = "Histograma dos dados")
lines(x, y, col = "red", lwd = 2)
exp(-theta)
tehta
theta
# install.packages("remotes")
# remotes::install_github("prdm0/zmpg", force = TRUE)
library(zmpg)
rm(list = ls(all = TRUE))
# Função quantílica da densidade imprópria ZMPG ---------------------------
qzmpg <- function(q_base){
function(n, theta, lambda, rho, ...){
assertthat::assert_that(
theta > 0,
msg = "The parameter 'theta' must be positive."
)
assertthat::assert_that(
lambda > 0 && lambda <=1 ,
msg = "The parameter 'lambda' must be positive and less than or equal to 1."
)
assertthat::assert_that(
rho > 0 && rho <= 1/(1-exp(-theta)),
msg = "The parameter 'rho' must be positive and less than or equal to 1."
)
u <- runif(n = n, min = 0, max = rho * (1 - exp(-theta)))
point <-
1 - exp(lambda) * (1/theta * log(1 - u/rho) + 1) *
exp(-lambda * (1/theta * log(1 - u/rho) + 1))
q_base(point, ...)
}
}
q_zmpg_exp <- qzmpg(q_base = qexp)
# Parametros verdadeiros
theta =  0.7
lambda = 0.3
rho = 0.5 # Não importa o rho, ele é anulado na verossimilhança
rate = 0.1
pdf <- function(x, theta, lambda, rho, rate) {
s0 <- exp(-rate * x)
h0 <- rate
arg_lambert <- -lambda * s0 * exp(-lambda)
kapa <- LambertW::W(arg_lambert)
r <-  -rho * theta * h0 * exp((-theta/lambda) * (kapa + lambda))/lambda * kapa/(1 + kapa)
attr(r, "arg_lambert") <- arg_lambert
return(r)
}
# Integral da densidade
c = integrate(pdf, lower = 0, upper = Inf, theta = theta, lambda = lambda, rho = rho, rate = rate)$value
# Garantindo reprodutibilidade
set.seed(0)
q_zmpg_exp <- qzmpg(q_base = qexp)
dados <-
q_zmpg_exp(
n = 5000L,
theta = theta,
lambda = lambda,
rho = rho,
rate = rate
)
# log_likelihood <- function(x, theta, lambda, rho, rate){
#   normalization_constant <- 1/(rho * (1 - exp(-theta)))
#   obj <-
#     pdf(x = x, theta = theta, lambda = lambda, rho = rho, rate = rate) *
#     normalization_constant
#   arg_lambert <- attr(obj, "arg_lambert")
#
#   if(lambda > 1) return(Inf)
#   else if(rho > 1/(1-exp(-theta))) return(Inf)
#   else if(any(arg_lambert < -1/exp(1))) return(Inf)
#   else if(any(c(theta, lambda, rate) <= 0)) return(Inf)
#   else return(-s <- survival_function(pdf)
# s_lim <-  s(t = 2000, theta = emv_3$par[1L], lambda = emv_3$par[2L], rho = emv_3$par[3L], rate = emv_3$par[4L])sum(log(obj)))
# }
log_likelihood <- function(x, theta, lambda, rho, rate){
normalization_constant <- 1/(rho * (1 - exp(-theta)))
obj <-
pdf(x = x, theta = theta, lambda = lambda, rho = rho, rate = rate) *
normalization_constant
arg_lambert <- attr(obj, "arg_lambert")
#if(lambda > 1) return(Inf)
#else if(rho > 1/(1-exp(-theta))) return(Inf)
#else if(any(arg_lambert < -1/exp(1))) return(Inf)
#else if(any(c(theta, lambda, rate) <= 0)) return(Inf)
# Defina os valores de alpha e l1_ratio dentro da função
alpha <- 0.25
l1_ratio <- 0.5
# Adicione um termo de penalidade Elastic Net
l1_penalty <- l1_ratio * (theta + lambda + rho + rate)
l2_penalty <- (1 - l1_ratio) * (theta^2 + lambda^2 + rho^2 + rate^2)
penalty <- alpha * (l1_penalty + l2_penalty)
return(-sum(log(obj)) + penalty)
}
# Otimização --------------------------------------------------------------
# emv_1 <-
#   pso::psoptim(
#     par = c(0.5, 0.5, 0.5, 0.5),
#     fn = function(par) log_likelihood(x = dados, theta = par[1L], lambda = par[2L], rho = par[3L], rate = par[4L]),
#     lower = c(0.001, 0.001, 0.001, 0.001),
#     upper = c(20, 1, 1/(1-exp(-20)), 20),
#     control=list(type = "SPSO2007")
#   )
#
# emv_2 <-
#   DEoptim::DEoptim(
#     fn = function(par) log_likelihood(x = dados, theta = par[1L], lambda = par[2L], rho = par[3L], rate = par[4L]),
#     lower = c(0.001, 0.001, 0.001, 0.001),
#     upper = c(20, 0.6991829, 1/(1-exp(-20)), 20),
#     control = DEoptim.control(trace = FALSE, strategy = 3)
#   )$optim
emv_3 <-
optim(
par = c(0.5, 0.5, 0.5, 0.5),
fn = function(par) log_likelihood(x = dados, theta = par[1L], lambda = par[2L], rho = par[3L], rate = par[4L]),
method = "L-BFGS-B",
lower = c(0.001, 0.001, 0.001, 0.001),
upper = c(20, 1, 20, 20)
)
# Resultados --------------------------------------------------------------
# Função de sobrevivência
s <- survival_function(pdf)
# Fração de cura observada
s_lim <- s(t = 100, theta = emv_3$par[1L], lambda = emv_3$par[2L], rho = 1, rate = emv_3$par[4L])
rho_est <- (s_lim - 1)/(exp(-emv_3$par[1L]) - 1)
s_lim <-   1 - rho_est + rho_est * exp(-emv_3$par[1L])
cat(" -- Parametros Verdadeiros --\n")
cat("--> Theta: ", theta, "\n")
cat("--> Lambda: ", lambda, "\n")
cat("--> Rate: ", rate, "\n")
cat(" -- Estimativas de EMV --\n")
cat("Theta: ", emv_3$par[1L], "\n")
cat("Lambda: ", emv_3$par[2L], "\n")
cat("Rho: ", rho_est, "\n")
cat("Rate: ", emv_3$par[4L], "\n")
cat("Fração de cura do modelo: ", 1 - rho_est + rho_est * exp(-emv_3$par[1L]), "\n")
# Gráficos ---------------------------------------------------------------
x <- seq(min(dados), max(dados), length.out = 1000L)
y <- pdf(x = x, theta = emv_3$par[1L], lambda = emv_3$par[2L], rho = 1, rate = emv_3$par[4L])
hist(dados, probability = TRUE, breaks = 50, main = "Histograma dos dados")
lines(x, y, col = "red", lwd = 2)
rho_est
exp(-emv_3$par[1L]),
exp(-emv_3$par[1L])
-emv_3$par[1L]
emv_3$par[1L]
exp(-emv_3$par[1L])
survival_function <- function(t) {
# Substitua isso pela sua função de sobrevivência atual
exp(-t)
}
# Nova função de sobrevivência com cauda mais pesada
heavy_tail_survival_function <- function(t, alpha) {
survival_function(t) * t^(-alpha)
}
heavy_tail_survival_function(100,0.5)
heavy_tail_survival_function(100,1.5)
heavy_tail_survival_function(100,100.5)
survival_function <- function(t) {
# Substitua isso pela sua função de sobrevivência atual
exp(-t)
}
# Nova função de sobrevivência com cauda mais pesada
heavy_tail_survival_function <- function(t, alpha) {
survival_function(t) * t^(alpha)
}
heavy_tail_survival_function(100,100.5)
heavy_tail_survival_function(100,3)
heavy_tail_survival_function(100,10)
heavy_tail_survival_function(100,20)
heavy_tail_survival_function(100,30)
heavy_tail_survival_function(100,25)
heavy_tail_survival_function(100,10)
heavy_tail_survival_function(100,11)
heavy_tail_survival_function(100,12)
heavy_tail_survival_function(100,15)
heavy_tail_survival_function(100,19)
heavy_tail_survival_function(100,20)
heavy_tail_survival_function(100,30)
heavy_tail_survival_function(100,25)
heavy_tail_survival_function(100,21)
heavy_tail_survival_function(100,22)
survival_function <- function(t) {
# Substitua isso pela sua função de sobrevivência atual
exp(-t)
}
# Nova função de sobrevivência com cauda mais pesada
heavy_tail_survival_function <- function(t, alpha) {
(1-rho) + rho * survival_function(t)^alpha
}
heavy_tail_survival_function(100,22)
rho
heavy_tail_survival_function(100,1)
heavy_tail_survival_function(100,0.2)
heavy_tail_survival_function(10,0.2)
heavy_tail_survival_function(10,1.2)
heavy_tail_survival_function(10,10.2)
pdf
edit(ls)
