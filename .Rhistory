dados,
probability = TRUE,
ylim = c(0, 1.5)
)
# Plotando curva verdadeira sobre os dados gerado
lines(x, y, col = "red", lwd = 2)
# zmpg_exp <- zmpg::pdf_fragility_zmpg(dexp)
likelihood <- function(x, mu, phi, rho, lambda){
-sum(log(pdf(x = x, mu = mu, phi = phi, rho = rho, lambda = lambda)))
}
optim(
par = c(1),
fn = \(theta) likelihood(x = dados, mu = mu, phi = theta, rho = rho, lambda = lambda),
method = "Brent",
lower = 0,
upper = 30
)$par
library(LambertW)
# Parametros verdadeiros
mu = 10.7
phi = 4.5
rho = 3.2
lambda = 1.4
invervalo_geracao <- c(1e-4, 5)
# Densidade de Katy
pdf <- function(x, mu, phi, rho, lambda) {
s0 <- exp(-lambda * x)
delta <- (mu * phi)/(1 + mu * phi)
kapa <- LambertW::W(-delta * s0 * exp(-delta))
h0 <- lambda
-rho * h0 * exp(-1/phi * (kapa + delta))/phi * kapa/(1 + kapa)
}
# c <- integrate(
#   \(x) pdf(x, mu = mu, phi = phi, rho = rho, lambda = lambda),
#   lower = 0,
#   upper = 15
# )$value
#
# # Chegando a padronizacao
# integrate(
#   \(x) pdf(x, mu = mu, phi = phi, rho = rho, lambda = lambda)/c,
#   lower = 0,
#   upper = 15
# )
set.seed(0) # Garantindo reprodutibilidade
dados <- acceptance_rejection(
n = 5000L,
f = pdf, #\(...) pdf(...)/c,
continuous = TRUE,
args_pdf = list(mu = mu, phi = phi, rho = rho, lambda = lambda),
xlim = invervalo_geracao,
parallel = TRUE
)
x <- seq(invervalo_geracao[1L], invervalo_geracao[2L], length.out = 500L)
y <- pdf(x = x, mu = mu, phi = phi, rho = rho, lambda = lambda)/c
hist(
dados,
probability = TRUE,
ylim = c(0, 1.5)
)
# Plotando curva verdadeira sobre os dados gerado
lines(x, y, col = "red", lwd = 2)
# zmpg_exp <- zmpg::pdf_fragility_zmpg(dexp)
likelihood <- function(x, mu, phi, rho, lambda){
-sum(log(pdf(x = x, mu = mu, phi = phi, rho = rho, lambda = lambda)))
}
optim(
par = c(1),
fn = \(theta) likelihood(x = dados, mu = theta, phi = phi, rho = rho, lambda = lambda),
method = "Brent",
lower = 0,
upper = 30
)$par
library(LambertW)
# Parametros verdadeiros
mu = 10.7
phi = 4.5
rho = 3.2
lambda = 1.4
invervalo_geracao <- c(1e-4, 5)
# Densidade de Katy
pdf <- function(x, mu, phi, rho, lambda) {
s0 <- exp(-lambda * x)
delta <- (mu * phi)/(1 + mu * phi)
kapa <- LambertW::W(-delta * s0 * exp(-delta))
h0 <- lambda
-rho * h0 * exp(-1/phi * (kapa + delta))/phi * kapa/(1 + kapa)
}
# c <- integrate(
#   \(x) pdf(x, mu = mu, phi = phi, rho = rho, lambda = lambda),
#   lower = 0,
#   upper = 15
# )$value
#
# # Chegando a padronizacao
# integrate(
#   \(x) pdf(x, mu = mu, phi = phi, rho = rho, lambda = lambda)/c,
#   lower = 0,
#   upper = 15
# )
set.seed(0) # Garantindo reprodutibilidade
dados <- acceptance_rejection(
n = 5000L,
f = pdf, #\(...) pdf(...)/c,
continuous = TRUE,
args_pdf = list(mu = mu, phi = phi, rho = rho, lambda = lambda),
xlim = invervalo_geracao,
parallel = TRUE
)
x <- seq(invervalo_geracao[1L], invervalo_geracao[2L], length.out = 500L)
y <- pdf(x = x, mu = mu, phi = phi, rho = rho, lambda = lambda)/c
hist(
dados,
probability = TRUE,
ylim = c(0, 1.5)
)
# Plotando curva verdadeira sobre os dados gerado
lines(x, y, col = "red", lwd = 2)
# zmpg_exp <- zmpg::pdf_fragility_zmpg(dexp)
likelihood <- function(x, mu, phi, rho, lambda){
-sum(log(pdf(x = x, mu = mu, phi = phi, rho = rho, lambda = lambda)))
}
optim(
par = c(1),
fn = \(theta) likelihood(x = dados, mu = theta, phi = phi, rho = rho, lambda = lambda),
method = "L-BFGS-B",
lower = 0,
upper = 30
)$par
library(LambertW)
# Parametros verdadeiros
mu = 10.7
phi = 4.5
rho = 3.2
lambda = 1.4
invervalo_geracao <- c(1e-4, 5)
# Densidade de Katy
pdf <- function(x, mu, phi, rho, lambda) {
s0 <- exp(-lambda * x)
delta <- (mu * phi)/(1 + mu * phi)
kapa <- LambertW::W(-delta * s0 * exp(-delta))
h0 <- lambda
-rho * h0 * exp(-1/phi * (kapa + delta))/phi * kapa/(1 + kapa)
}
# c <- integrate(
#   \(x) pdf(x, mu = mu, phi = phi, rho = rho, lambda = lambda),
#   lower = 0,
#   upper = 15
# )$value
#
# # Chegando a padronizacao
# integrate(
#   \(x) pdf(x, mu = mu, phi = phi, rho = rho, lambda = lambda)/c,
#   lower = 0,
#   upper = 15
# )
set.seed(0) # Garantindo reprodutibilidade
dados <- acceptance_rejection(
n = 5000L,
f = pdf, #\(...) pdf(...)/c,
continuous = TRUE,
args_pdf = list(mu = mu, phi = phi, rho = rho, lambda = lambda),
xlim = invervalo_geracao,
parallel = TRUE
)
x <- seq(invervalo_geracao[1L], invervalo_geracao[2L], length.out = 500L)
y <- pdf(x = x, mu = mu, phi = phi, rho = rho, lambda = lambda)/c
hist(
dados,
probability = TRUE,
ylim = c(0, 1.5)
)
# Plotando curva verdadeira sobre os dados gerado
lines(x, y, col = "red", lwd = 2)
# zmpg_exp <- zmpg::pdf_fragility_zmpg(dexp)
likelihood <- function(x, mu, phi, rho, lambda){
-sum(log(pdf(x = x, mu = mu, phi = phi, rho = rho, lambda = lambda)))
}
optim(
par = c(1),
fn = \(theta) likelihood(x = dados, mu = mu, phi = phi, rho = rho, lambda = theta),
method = "L-BFGS-B",
lower = 0,
upper = 30
)$par
remotes::install("prdm0/zmpg", force = TRUE)
remotes::install_github("prdm0/zmpg", force = TRUE)
library(LambertW)
# install.packages("remotes")
# remotes::install_github("prdm0/zmpg", force = TRUE)
library(zmpg)
# Parametros verdadeiros
mu = 10.7
phi = 4.5
rho = 3.2
lambda = 1.4
invervalo_geracao <- c(0, 5)
# Densidade de Katy
pdf <- function(x, mu, phi, rho, lambda) {
s0 <- exp(-lambda * x)
delta <- (mu * phi)/(1 + mu * phi)
kapa <- LambertW::W(-delta * s0 * exp(-delta))
h0 <- lambda
-rho * h0 * exp(-1/phi * (kapa + delta))/phi * kapa/(1 + kapa)
}
# c <- integrate(
#   \(x) pdf(x, mu = mu, phi = phi, rho = rho, lambda = lambda),
#   lower = 0,
#   upper = 15
# )$value
#
# # Chegando a padronizacao
# integrate(
#   \(x) pdf(x, mu = mu, phi = phi, rho = rho, lambda = lambda)/c,
#   lower = 0,
#   upper = 15
# )
set.seed(0) # Garantindo reprodutibilidade
dados <- acceptance_rejection(
n = 5000L,
f = pdf, #\(...) pdf(...)/c,
continuous = TRUE,
args_pdf = list(mu = mu, phi = phi, rho = rho, lambda = lambda),
xlim = invervalo_geracao,
parallel = TRUE
)
x <- seq(invervalo_geracao[1L], invervalo_geracao[2L], length.out = 500L)
y <- pdf(x = x, mu = mu, phi = phi, rho = rho, lambda = lambda)/c
hist(
dados,
probability = TRUE,
ylim = c(0, 1.5)
)
# Plotando curva verdadeira sobre os dados gerado
lines(x, y, col = "red", lwd = 2)
# zmpg_exp <- zmpg::pdf_fragility_zmpg(dexp)
likelihood <- function(x, mu, phi, rho, lambda){
-sum(log(pdf(x = x, mu = mu, phi = phi, rho = rho, lambda = lambda)))
}
optim(
par = c(1),
fn = \(theta) likelihood(x = dados, mu = mu, phi = phi, rho = rho, lambda = theta),
method = "L-BFGS-B",
lower = 0,
upper = 30
)$par
optim(
par = c(1, 1),
fn = \(theta) likelihood(x = dados, mu = mu, phi = theta[1], rho = rho, lambda = theta[2]),
method = "L-BFGS-B",
lower = 0,
upper = 30
)$par
optim(
par = c(1, 1),
fn = \(theta) likelihood(x = dados, mu = mu, phi = theta[1], rho = rho, lambda = theta[2]),
method = "L-BFGS-B",
lower = c(0, 0),
upper = c(30, 30)
)$par
optim(
par = c(1, 1),
fn = \(theta) likelihood(x = dados, mu = mu, phi = theta[1], rho = rho, lambda = theta[2]),
method = "L-BFGS-B",
lower = c(0.1, 0.1),
upper = c(30, 30)
)$par
optim(
par = c(1, 1),
fn = \(theta) likelihood(x = dados, mu = mu, phi = theta[1], rho = rho, lambda = theta[2]),
method = "L-BFGS-B",
lower = c(0.1, 0.1),
upper = c(30, 30)
)$par
optim(
par = c(1),
fn = \(theta) likelihood(x = dados, mu = mu, phi = theta[1], rho = rho, lambda = theta),
method = "L-BFGS-B",
lower = 0,
upper = 30
)$par
optim(
par = c(1),
fn = \(theta) likelihood(x = dados, mu = mu, phi = phi, rho = rho, lambda = theta),
method = "L-BFGS-B",
lower = 0,
upper = 30
)$par
pkgdown::build_site()
help()
install.packages("AR")
library(AR)
AR.Sim(n, f_X, Y.dist, Y.dist.par, xlim = c(0, 1), S_X = xlim, Rej.Num = TRUE,
Rej.Rate = TRUE, Acc.Rate = TRUE)
data = AR.Sim( n = 150,
f_X = function(y){dbeta(y,2.7,6.3)},
Y.dist = "unif", Y.dist.par = c(0,1),
Rej.Num = TRUE,
Rej.Rate = TRUE,
Acc.Rate = FALSE
)
Rej.Rate = TRUE, Acc.Rate = TRUE)
data = AR.Sim( n = 150,
f_X = function(y){dbeta(y,2.7,6.3)},
Y.dist = "unif", Y.dist.par = c(0,1),
Rej.Num = TRUE,
Rej.Rate = TRUE,
Acc.Rate = FALSE
)
data = AR.Sim( n = 150,
f_X = function(y){dgamma(y,2.7,6.3)},
Y.dist = "unif", Y.dist.par = c(0,1),
Rej.Num = TRUE,
Rej.Rate = TRUE,
Acc.Rate = FALSE
)
data = AR.Sim( n = 15000,
f_X = function(y){dgamma(y,2.7,6.3)},
Y.dist = "unif", Y.dist.par = c(0,1),
Rej.Num = TRUE,
Rej.Rate = TRUE,
Acc.Rate = FALSE
)
data = AR.Sim( n = 15000,
f_X = function(y){dgamma(y,2.7,6.3)},
Y.dist = "unif", Y.dist.par = c(0,1),
Rej.Num = FALSE,
Rej.Rate = FALSE,
Acc.Rate = FALSE
)
data = AR.Sim( n = 1500,
f_X = function(y){dgamma(y,2.7,6.3)},
Y.dist = "unif", Y.dist.par = c(0,1),
Rej.Num = FALSE,
Rej.Rate = FALSE,
Acc.Rate = FALSE
)
data
hist(data)
data = AR.Sim( n = 1500,
f_X = function(y){dnorm(y,0,1)},
Y.dist = "unif", Y.dist.par = c(0,1),
Rej.Num = FALSE,
Rej.Rate = FALSE,
Acc.Rate = FALSE
)
hist(data)
data = AR.Sim( n = 1500,
f_X = function(y){dnorm(y,0,1)},
Y.dist = "unif", Y.dist.par = c(-3,3),
Rej.Num = FALSE,
Rej.Rate = FALSE,
Acc.Rate = FALSE
)
hist(data)
data = AR.Sim( n = 1500,
f_X = function(y){dnorm(y,0,1)},
Y.dist = "unif", Y.dist.par = c(-30,30),
Rej.Num = FALSE,
Rej.Rate = FALSE,
Acc.Rate = FALSE
)
acceptance_rejection(
n = 1000L,
f = dnorm,
continuous = TRUE,
args_pdf = list(mean = 0, sd = 1),
xlim = c(-4, 4)
) |>
hist(
main = "Generating Gaussian observations",
xlab = "x",
p
)
acceptance_rejection(
n = 1000L,
f = dnorm,
continuous = TRUE,
args_pdf = list(mean = 0, sd = 1),
xlim = c(-4, 4)
) |>
hist(
main = "Generating Gaussian observations",
xlab = "x",
probability = TRUE
)
library(zmpg)
acceptance_rejection(
n = 1000L,
f = dnorm,
continuous = TRUE,
args_pdf = list(mean = 0, sd = 1),
xlim = c(-4, 4)
) |>
hist(
main = "Generating Gaussian observations",
xlab = "x",
probability = TRUE
)
acceptance_rejection(
n = 1000L,
f = dnorm,
continuous = TRUE,
args_pdf = list(mean = 0, sd = 1),
xlim = c(-4, 4)
) |>
hist(
main = "Generating Gaussian observations",
xlab = "x",
probability = TRUE
)
acceptance_rejection(
n = 1000L,
f = dnorm,
continuous = TRUE,
args_pdf = list(mean = 0, sd = 1),
xlim = c(-30, 30)
) |>
hist(
main = "Generating Gaussian observations",
xlab = "x",
probability = TRUE
)
acceptance_rejection(
n = 1000L,
f = dnorm,
continuous = TRUE,
args_pdf = list(mean = 0, sd = 1),
xlim = c(-4, 4),
parallel = TRUE
) |>
hist(
main = "Generating Gaussian observations",
xlab = "x",
probability = TRUE
)
acceptance_rejection(
n = 1000L,
f = dnorm,
continuous = TRUE,
args_pdf = list(mean = 0, sd = 1),
xlim = c(-10, 10),
parallel = TRUE
) |>
hist(
main = "Generating Gaussian observations",
xlab = "x",
probability = TRUE
)
acceptance_rejection(
n = 10000L,
f = dnorm,
continuous = TRUE,
args_pdf = list(mean = 0, sd = 1),
xlim = c(-4, 4),
parallel = TRUE
) |>
hist(
main = "Generating Gaussian observations",
xlab = "x",
probability = TRUE
)
acceptance_rejection(
n = 20000L,
f = dnorm,
continuous = TRUE,
args_pdf = list(mean = 0, sd = 1),
xlim = c(-4, 4),
parallel = TRUE
) |>
hist(
main = "Generating Gaussian observations",
xlab = "x",
probability = TRUE
)
data = AR.Sim( n = 20000,
f_X = function(y){dnorm(y,0,1)},
Y.dist = "unif", Y.dist.par = c(-4,4),
Rej.Num = FALSE,
Rej.Rate = FALSE,
Acc.Rate = FALSE
)
data = AR.Sim( n = 20000,
f_X = function(y){dbinom(y,20,0.5)},
Y.dist = "unif", Y.dist.par = c(0,4),
Rej.Num = FALSE,
Rej.Rate = FALSE,
Acc.Rate = FALSE
)
data = AR.Sim( n = 20000,
f_X = function(y){dbinom(y,20,0.5)},
Y.dist = "unif", Y.dist.par = c(1,4),
Rej.Num = FALSE,
Rej.Rate = FALSE,
Acc.Rate = FALSE
)
data = AR.Sim( n = 1000,
f_X = function(y){dbinom(y,20,0.5)},
Y.dist = "unif", Y.dist.par = c(1,4),
Rej.Num = FALSE,
Rej.Rate = FALSE,
Acc.Rate = FALSE
)
data = AR.Sim( n = 2000,
f_X = function(y){dnorm(y,0,1)},
Y.dist = "unif", Y.dist.par = c(-4,4),
Rej.Num = FALSE,
Rej.Rate = FALSE,
Acc.Rate = FALSE
)
hist(dados)
hist(data)
