[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"/articles/acceptance_rejection.html","id":"understanding-the-method","dir":"Articles","previous_headings":"","what":"Understanding the Method","title":"Acceptance and rejection method","text":"situations use inversion method (situations obtaining quantile function possible) neither know transformation involving random variable can generate observations, can make use acceptance-rejection method. Suppose \\(X\\) \\(Y\\) random variables probability density function (pdf) probability function (pf) \\(f\\) \\(g\\), respectively. Furthermore, suppose exists constant \\(c\\) \\[\\frac{f(t)}{g(t)} \\leq c,\\] every value \\(t\\), \\(f(t) > 0\\). use acceptance-rejection method generate observations random variable \\(X\\), using algorithm , first find random variable \\(Y\\) pdf pf \\(g\\), satisfies condition. Important: important chosen random variable \\(Y\\) can easily generate observations. acceptance-rejection method computationally intensive direct methods transformation method inversion method, requires generation pseudo-random numbers uniform distribution. Algorithm Acceptance-Rejection Method: 1 - Generate observation \\(y\\) random variable \\(Y\\) pdf/pf \\(g\\); 2 - Generate observation \\(u\\) random variable \\(U\\sim \\mathcal{U} (0, 1)\\); 3 - \\(u < \\frac{f(y)}{cg(y)}\\) accept \\(x = y\\); otherwise reject \\(y\\) observation random variable \\(X\\) go back step 1. Proof: Consider discrete case, , \\(X\\) \\(Y\\) random variables pfs \\(f\\) \\(g\\), respectively. step 3 algorithm , \\(\\{accept\\} = \\{x = y\\} = u < \\frac{f(y)}{cg(y)}\\). , \\[P(accept | Y = y) = \\frac{P(accept \\cap \\{Y = y\\})}{g(y)} = \\frac{P(U \\leq f(y)/cg(y)) \\times g(y)}{g(y)} = \\frac{f(y)}{cg(y)}.\\] Hence, Law Total Probability, : \\[P(accept) = \\sum_y P(accept|Y=y)\\times P(Y=y) = \\sum_y \\frac{f(y)}{cg(y)}\\times g(y) = \\frac{1}{c}.\\] Therefore, acceptance-rejection method, accept occurrence \\(Y\\) occurrence \\(X\\) probability \\(1/c\\). Moreover, Bayes’ Theorem, \\[P(Y = y | accept) = \\frac{P(accept|Y = y)\\times g(y)}{P(accept)} = \\frac{[f(y)/cg(y)] \\times g(y)}{1/c} = f(y).\\] result shows accepting \\(x = y\\) algorithm’s procedure equivalent accepting value \\(X\\) pf \\(f\\). continuous case, proof similar. Important: Notice reduce computational cost method, choose \\(c\\) way can maximize \\(P(accept)\\). Therefore, choosing excessively large value constant \\(c\\) reduce probability accepting observation \\(Y\\) observation random variable \\(X\\). Note: Computationally, convenient consider \\(Y\\) random variable uniform distribution support \\(f\\), since generating observations uniform distribution straightforward computer. discrete case, considering \\(Y\\) discrete uniform distribution might good alternative.","code":""},{"path":"/articles/acceptance_rejection.html","id":"installation-and-loading-the-package","dir":"Articles","previous_headings":"","what":"Installation and loading the package","title":"Acceptance and rejection method","text":"zmpg package available CRAN can installed using following command:","code":"# Instalando o pacote remotes::install_github(\"prdm0/zmpg\", force = TRUE)  # Carregando o pacote library(zmpg)"},{"path":"/articles/acceptance_rejection.html","id":"using-the-acceptance_rejection-function","dir":"Articles","previous_headings":"Installation and loading the package","what":"Using the acceptance_rejection Function","title":"Acceptance and rejection method","text":"Among various functions provided zmpg library, acceptance_rejection function implements acceptance-rejection method. zmpg::acceptance_rejection() function following signature: Many arguments user need change, zmpg::acceptance_rejection() function already default values . However, important note f argument probability density function (pdf) probability function (pf) random variable \\(X\\) observations desired generated. args_pdf argument list arguments passed f function. c argument value constant c used acceptance-rejection method. user provide value c, zmpg::acceptance_rejection() function calculate value c maximizes probability accepting observations \\(Y\\) observations \\(X\\). Note: need define c argument using zmpg::acceptance_rejection() function. default, c = NULL, zmpg::acceptance_rejection() function calculate value c maximizes probability accepting observations \\(Y\\) observations \\(X\\). However, want set value c, simply pass value c argument. Details optimization c: arguments linesearch_algorithm, max_iterations, epsilon, start_c, ... arguments control optimization algorithm c value. linesearch_algorithm argument line search algorithm used optimization c value. max_iterations argument maximum number iterations optimization algorithm perform. epsilon argument stopping criterion optimization algorithm. start_c argument initial value c used optimization algorithm. arguments passed lbfgs::lbfgs() function, generally, need change .","code":"acceptance_rejection(   n = 1L,   continuous = TRUE,   f = dweibull,   args_pdf = list(shape = 1, scale = 1),   xlim = c(0, 100),   c = NULL,   linesearch_algorithm = \"LBFGS_LINESEARCH_BACKTRACKING_ARMIJO\",   max_iterations = 1000L,   epsilon = 1e-06,   start_c = 25,   parallel = FALSE,   ... )"},{"path":"/articles/acceptance_rejection.html","id":"examples","dir":"Articles","previous_headings":"","what":"Examples","title":"Acceptance and rejection method","text":"examples using zmpg::acceptance_rejection() function generate pseudo-random observations discrete continuous random variables. noted case \\(X\\) discrete random variable, necessary provide argument continuous = FALSE, whereas case \\(X\\) continuous (default), must consider continuous = TRUE.","code":""},{"path":"/articles/acceptance_rejection.html","id":"generating-discrete-observations","dir":"Articles","previous_headings":"Examples","what":"Generating discrete observations","title":"Acceptance and rejection method","text":"example, let \\(X \\sim Poisson(\\lambda = 0.7)\\). generate \\(n = 1000\\) observations \\(X\\) using acceptance-rejection method, using zmpg::acceptance_rejection() function. Note necessary provide xlim argument. Try set upper limit value probability \\(X\\) assuming value zero close zero. case, choose xlim = c(0, 20), dpois(x = 20, lambda = 0.7) close zero (1.6286586^{-22}).  Note necessary specify nature random variable observations desired generated. case discrete variables, argument continuous = FALSE must passed. Now, consider want generate observations random variable \\(X \\sim Binomial(n = 5, p = 0.7)\\). , generate \\(n = 2000\\) observations \\(X\\).","code":"library(zmpg)  # Ensuring Reproducibility set.seed(0)   # Generating observations data <- zmpg::acceptance_rejection(   n = 1000L,   f = dpois,   continuous = FALSE,   args_pdf = list(lambda = 0.7),   xlim = c(0, 20),   parallel = TRUE )  # Calculating the true probability function for each observed value values <- unique(data) true_prob <- dpois(values, lambda = 0.7)  # Calculating the observed probability for each value in the observations vector obs_prob <- table(data) / length(data)  # Plotting the probabilities and observations plot(values, true_prob, type = \"p\", pch = 16, col = \"blue\",      xlab = \"x\", ylab = \"Probability\", main = \"Probability Function\")  # Adding the observed probabilities points(as.numeric(names(obs_prob)), obs_prob, pch = 16L, col = \"red\") legend(\"topright\", legend = c(\"True probability\", \"Observed probability\"),         col = c(\"blue\", \"red\"), pch = 16L, cex = 0.8) grid() library(zmpg)  # Ensuring reproducibility set.seed(0)   # Generating observations data <- zmpg::acceptance_rejection(   n = 2000L,   f = dbinom,   continuous = FALSE,   args_pdf = list(size = 5, prob = 0.5),   xlim = c(0, 20),   parallel = TRUE )  # Calculating the true probability function for each observed value values <- unique(data) true_prob <- dbinom(values, size = 5, prob = 0.5)  # Calculating the observed probability for each value in the observations vector obs_prob <- table(data) / length(data)  # Plotting the probabilities and observations plot(values, true_prob, type = \"p\", pch = 16, col = \"blue\",      xlab = \"x\", ylab = \"Probability\", main = \"Probability Function\")  # Adding the observed probabilities points(as.numeric(names(obs_prob)), obs_prob, pch = 16L, col = \"red\") legend(\"topright\", legend = c(\"True probability\", \"Observed probability\"),         col = c(\"blue\", \"red\"), pch = 16L, cex = 0.8) grid()"},{"path":"/articles/acceptance_rejection.html","id":"generating-continuous-observations","dir":"Articles","previous_headings":"Examples","what":"Generating continuous observations","title":"Acceptance and rejection method","text":"expand beyond examples generating pseudo-random observations discrete random variables, consider now want generate observations random variable \\(X \\sim \\mathcal{N}(\\mu = 0, \\sigma^2 = 1)\\). chose normal distribution familiar form, can choose another distribution desired. , generate n = 2000 observations using acceptance-rejection method. Note continuous = TRUE.","code":"library(zmpg)  # Ensuring reproducibility set.seed(0)   # Generating observations data <- zmpg::acceptance_rejection(   n = 2000L,   f = dnorm,   continuous = TRUE,   args_pdf = list(mean = 0, sd = 1),   xlim = c(-4, 4),   parallel = TRUE )  hist(   data,   main = \"Generating Gaussian observations\",   xlab = \"x\",   probability = TRUE )  x <- seq(-4, 4, length.out = 500L) y <- dnorm(x, mean = 0, sd = 1) lines(x, y, col = \"red\", lwd = 2) legend(\"topright\", legend = \"True density\", col = \"red\", lwd = 2)"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Pedro Rafael D. Marinho. Author, maintainer. Vera Lucia Damasceno Tomazella. Author. Katy Rocio Cruz Molina. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"D. Marinho P, Tomazella V, Molina K (2024). zmpg: Generalized Zero-Modified Poisson Fragility Model. R package version 0.0.0.9000.","code":"@Manual{,   title = {zmpg: Generalized Zero-Modified Poisson Fragility Model},   author = {Pedro Rafael {D. Marinho} and Vera Lucia Damasceno Tomazella and Katy Rocio Cruz Molina},   year = {2024},   note = {R package version 0.0.0.9000}, }"},{"path":"/index.html","id":"zmpg-generalized-zero-modified-poisson-fragility-model-","dir":"","previous_headings":"","what":"Generalized Zero-Modified Poisson Fragility Model","title":"Generalized Zero-Modified Poisson Fragility Model","text":"library provides useful functions survival analysis, particular, implements Zero-Modified Generalized Poisson - ZMPG survival model. ZMPG distribution function discrete random variable , , ZMPG model constructed. discrete random variable called frailty gives rise ZMPG frailty model continuous time. Functions provided numerical calculation cumulative distribution functions, survival functions, hazard functions based base probability density function - PDF base. probability generating functions Geometric Poisson distribution ZPMG also available. addition, package also provides functions work inference ZMPG frailty model plotting improper density function ZMPG frailty model, cumulative distribution function, survival function, hazard function.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Generalized Zero-Modified Poisson Fragility Model","text":"package versioned GitHub. can install development version zmpg, , must first install remotes package run following command: force = TRUE argument necessary. needed situations already installed package want reinstall new version.","code":"# Install zmpg package remotes::install_github(\"prdm0/zmpg\", force = TRUE)"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Generalized Zero-Modified Poisson Fragility Model","text":"details functions available package, please refer Reference tab top page. find small usage examples exported functions, well better understanding one , arguments needed, returns expected. functions use concept closures, functions build useful functions. example, following code, pdf_fragility_zmpg function function receives base probability density function, passed pdf argument. function returns function terms arguments: t - survival time t > 0. argument vectorized can pass vector survival times; phi - dispersion parameter ϕ ≥ 0 ZMPG frailty model distribution; rho - parameter ρ ≥ 0 ZMPG frailty model; ... - arguments base probability density function may require. following example, dweibull function passed argument pdf_fragility_zmpg function. dweibull function probability density function Weibull distribution already implemented R language. However, also implement probability density function wish, limiting base densities implemented R.","code":"# remotes::install_github(\"prdm0/zmpg\") library(zmpg)  # install.packages(\"cowplot\") library(cowplot)  zmpg_weibull <- zmpg::pdf_fragility_zmpg(dweibull)  # Improper density function of the ZMPG-Weibull fragility model density <-   zmpg_weibull(     t = seq(0.001, 3, length.out = 50L),     mu = 10.7,     phi = 2.6,     rho = 3.1,     shape = 2.5,     scale = 1.2   )  # Cumulative distribution function of the ZMPG-Weibull fragility model cdf <-   zmpg::cdf_function(zmpg_weibull)(     t = seq(0.001, 3, length.out = 50L),     mu = 10.7,     phi = 2.6,     rho = 3.1,     shape = 2.5,     scale = 1.2   )  # Survival function of the ZMPG-Weibull fragility model survival <-   zmpg::survival_function(zmpg_weibull)(     t = seq(0.001, 3, length.out = 50L),     mu = 10.7,     phi = 2.6,     rho = 3.1,     shape = 2.5,     scale = 1.2   )  # Hazard function of the ZMPG-Weibull fragility model hazard <-   zmpg::hazard_function(zmpg_weibull)(     t = seq(0.001, 3, length.out = 50L),     mu = 10.7,     phi = 2.6,     rho = 3.1,     shape = 2.5,     scale = 1.2   )  # Useful plots  p_1 <- plot(density) p_2 <- plot(cdf) p_3 <- plot(survival) p_4 <- plot(hazard)  plot_grid(p_1, p_2, p_3, p_4, labels = c('A', 'B', 'C', 'D'))"},{"path":"/reference/acceptance_rejection.html","id":null,"dir":"Reference","previous_headings":"","what":"Acceptance-Rejection Method — acceptance_rejection","title":"Acceptance-Rejection Method — acceptance_rejection","text":"function implements acceptance-rejection method generating random numbers given probability density function (pdf).","code":""},{"path":"/reference/acceptance_rejection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Acceptance-Rejection Method — acceptance_rejection","text":"","code":"acceptance_rejection(   n = 1L,   continuous = TRUE,   f = dweibull,   args_pdf = list(shape = 1, scale = 1),   xlim = c(0, 100),   c = NULL,   linesearch_algorithm = \"LBFGS_LINESEARCH_BACKTRACKING_ARMIJO\",   max_iterations = 1000L,   epsilon = 1e-06,   start_c = 25,   parallel = FALSE,   ... )"},{"path":"/reference/acceptance_rejection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Acceptance-Rejection Method — acceptance_rejection","text":"n number random numbers generate. continuous logical value indicating whether pdf continuous discrete. Default TRUE. f probability density function (continuous = TRUE), continuous case probability mass function, discrete case (continuous = FALSE). args_pdf list arguments passed pdf function. xlim vector specifying range values random numbers form c(min, max). Default c(0, 100). c constant value used acceptance-rejection method. NULL, estimated using lbfgs::lbfgs() optimization algorithm. Default NULL. linesearch_algorithm linesearch algorithm used lbfgs::lbfgs() optimization. Default \"LBFGS_LINESEARCH_BACKTRACKING_ARMIJO\". max_iterations maximum number iterations lbfgs::lbfgs() optimization. Default 1000. epsilon convergence criterion lbfgs::lbfgs() optimization. Default 1e-6. start_c initial value constant c lbfgs::lbfgs() optimization. Default 25. parallel logical value indicating whether use parallel processing generating random numbers. Default FALSE. ... Additional arguments passed lbfgs::lbfgs() optimization algorithm. details, see lbfgs::lbfgs().","code":""},{"path":"/reference/acceptance_rejection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Acceptance-Rejection Method — acceptance_rejection","text":"vector random numbers generated using acceptance-rejection method.","code":""},{"path":"/reference/acceptance_rejection.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Acceptance-Rejection Method — acceptance_rejection","text":"situations use inversion method (situations possible obtain quantile function) know transformation involves random variable can generate observations, can use acceptance rejection method. Suppose \\(X\\) \\(Y\\) random variables probability density function (pdf) probability function (pf) \\(f\\) \\(g\\), respectively. addition, suppose constant \\(c\\) $$f(x) \\leq c \\cdot g(x), \\quad \\forall x \\\\mathbb{R}.$$ values \\(t\\), \\(f(t)>0\\). use acceptance rejection method generate observations random variable \\(X\\), using algorithm , first find random variable \\(Y\\) pdf pf \\(g\\), satisfies condition. Algorithm Acceptance Rejection Method: 1 - Generate observation \\(y\\) random variable \\(Y\\) pdf/pf \\(g\\); 2 - Generate observation \\(u\\) random variable \\(U\\sim \\mathcal{U} (0, 1)\\); 3 - \\(u < \\frac{f(y)}{cg(y)}\\) accept \\(x = y\\); otherwise reject \\(y\\) observation random variable \\(X\\) return step 1. Proof: consider discrete case, , \\(X\\) \\(Y\\) random variables pf's \\(f\\) \\(g\\), respectively. step 3 algorithm, \\({accept} = {x = y} = u < \\frac{f(y)}{cg(y)}\\). , \\(P(accept | Y = y) = \\frac{P(accept \\cap {Y = y})}{g(y)} = \\frac{P(U \\leq f(y)/cg(y)) \\times g(y)}{g(y)} = \\frac{f(y)}{cg(y)}.\\) Hence, Total Probability Theorem, : \\(P(accept) = \\sum_y P(accept|Y=y)\\times P(Y=y) = \\sum_y \\frac{f(y)}{cg(y)}\\times g(y) = \\frac{1}{c}.\\) Therefore, acceptance rejection method accept occurrence $Y$ occurrence \\(X\\) probability \\(1/c\\). addition, Bayes' Theorem, \\(P(Y = y | accept) = \\frac{P(accept|Y = y)\\times g(y)}{P(accept)} = \\frac{[f(y)/cg(y)] \\times g(y)}{1/c} = f(y).\\) result shows accepting \\(x = y\\) procedure algorithm equivalent accepting value \\(X\\) pf \\(f\\). argument c = NULL default. Thus, function acceptance_rejection() estimates value c using optimization algorithm lbfgs::lbfgs(). details, see lbfgs::lbfgs(). value c provided, function acceptance_rejection() use value generate random observations. inappropriate choice c can lead low efficiency acceptance rejection method. Unix-based operating systems, function acceptance_rejection() can executed parallel. , simply set argument parallel = TRUE. function acceptance_rejection() utilizes parallel::mclapply() function execute acceptance rejection method parallel. Windows operating systems, code seral even parallel = TRUE set.","code":""},{"path":[]},{"path":"/reference/acceptance_rejection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Acceptance-Rejection Method — acceptance_rejection","text":"","code":"set.seed(0) # setting a seed for reproducibility  acceptance_rejection(  n = 2000L,  f = dbinom,  continuous = FALSE,  args_pdf = list(size = 5, prob = 0.5),  xlim = c(0, 10) ) |> table() |> barplot(main = \"Generating Binomial observations\")   acceptance_rejection(  n = 1000L,  f = dnorm,  continuous = TRUE,  args_pdf = list(mean = 0, sd = 1),  xlim = c(-4, 4) ) |> hist(   main = \"Generating Gaussian observations\",   xlab = \"x\",   probability = TRUE )"},{"path":"/reference/cdf_function.html","id":null,"dir":"Reference","previous_headings":"","what":"cdf_function — cdf_function","title":"cdf_function — cdf_function","text":"function creates cumulative distribution function (CDF) based given probability density function (PDF). CDF defined integral PDF 0 given value t.","code":""},{"path":"/reference/cdf_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"cdf_function — cdf_function","text":"","code":"cdf_function(pdf)"},{"path":"/reference/cdf_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"cdf_function — cdf_function","text":"pdf probability density function.","code":""},{"path":"/reference/cdf_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"cdf_function — cdf_function","text":"cumulative distribution function terms time t parameters index probability density function passed argument pdf. function, returned cdf_function(), vectorized relation t. using cdf_function(), utilizing concept closure, function returned terms t parameters index PDF passed argument pdf. using function returned cdf_function(), cumulative probabilities relation time t, .e., \\(P(T \\leq t)\\) returned. addition, function carries time attribute time t used calculate cumulative probability can used plot cumulative distribution function. class object returned using function returned cdf_function() cdf_function.","code":""},{"path":"/reference/cdf_function.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"cdf_function — cdf_function","text":"cdf_function() returns cumulative distribution function (CDF) obtained numerically probability density function (PDF). idea function user need integrate probability density function can easily obtain cumulative distribution function experiments, simply passing probability density function argument, thus significantly reducing amount code. computational performance standpoint, situations, might make sense implement analytical form CDF. However, numerical approach general can applied probability density function without much effort.","code":""},{"path":[]},{"path":"/reference/cdf_function.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"cdf_function — cdf_function","text":"","code":"# Create a CDF based on a PDF cdf <- cdf_function(pdf = dweibull)  # Evaluate the CDF at a specific value of t cdf(t = 1, shape = 2, scale = 1) #> [1] 0.6321206 #> attr(,\"time\") #> [1] 1 #> attr(,\"class\") #> [1] \"cdf_function\"  # Evaluate the CDF for a vector of values cdf(t = 1L:30L, shape = 2, scale = 1) #>  [1] 0.6321206 0.9816844 0.9998766 0.9999999 1.0000000 1.0000000 1.0000000 #>  [8] 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 #> [15] 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 #> [22] 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 #> [29] 1.0000000 1.0000000 #> attr(,\"time\") #>  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #> [26] 26 27 28 29 30 #> attr(,\"class\") #> [1] \"cdf_function\""},{"path":"/reference/dgp.html","id":null,"dir":"Reference","previous_headings":"","what":"Generalized Poisson Distribution — dgp","title":"Generalized Poisson Distribution — dgp","text":"Probability function random variable Generalized Poisson distribution.","code":""},{"path":"/reference/dgp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized Poisson Distribution — dgp","text":"","code":"dgp(y, mu, phi)"},{"path":"/reference/dgp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized Poisson Distribution — dgp","text":"y Vector integer values, \\(y \\geq 0\\). mu mean parameter, \\(\\mu > 0\\). phi dispersion parameter, \\(\\phi \\geq 0\\).","code":""},{"path":"/reference/dgp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generalized Poisson Distribution — dgp","text":"Vector probability values \\(Y = y\\).","code":""},{"path":[]},{"path":"/reference/dgp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generalized Poisson Distribution — dgp","text":"","code":"pg(0L:100L, mu = 0.5, phi = 0.7) |> sum() #> Error in pg(0L:100L, mu = 0.5, phi = 0.7): could not find function \"pg\""},{"path":"/reference/fgp_pg.html","id":null,"dir":"Reference","previous_headings":"","what":"Probability generating function of the Geometric Poisson distribution — fgp_pg","title":"Probability generating function of the Geometric Poisson distribution — fgp_pg","text":"Probability generating function Geometric Poisson distribution proposed Ambagaspitiya Balakrishnan (1994).","code":""},{"path":"/reference/fgp_pg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Probability generating function of the Geometric Poisson distribution — fgp_pg","text":"","code":"fgp_pg(t, mu, phi)"},{"path":"/reference/fgp_pg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Probability generating function of the Geometric Poisson distribution — fgp_pg","text":"t numeric vector representing input values \\(t \\geq 0\\). mu numeric value representing input value \\(\\mu > 0\\). phi numeric value representing input value \\(\\phi \\geq 0\\).","code":""},{"path":"/reference/fgp_pg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Probability generating function of the Geometric Poisson distribution — fgp_pg","text":"numeric vector representing calculated values fgp_pg.","code":""},{"path":"/reference/fgp_pg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Probability generating function of the Geometric Poisson distribution — fgp_pg","text":"function fgp_pg calculates probability generating : \\(  G(t) = e^{-\\frac{1}{\\phi}\\left[W\\left(-\\frac{\\mu\\phi}{1 + \\mu\\phi}t e^{-\\frac{\\mu\\phi}{1 + \\mu\\phi}}\\right) + \\frac{\\mu\\phi}{1 + \\mu\\phi}\\right]}, \\) \\(0 \\leq t \\leq 1\\), \\(W\\) Lambert function (CORLESS et al., 1996), , \\(W(x)e^{W(x)} = x\\).","code":""},{"path":"/reference/fgp_pg.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Probability generating function of the Geometric Poisson distribution — fgp_pg","text":"AMBAGASPITIYA, R. S.; BALAKRISHNAN, N. compound generalized poisson distributions. ASTIN Bulletin: Journal IAA, Cambridge University Press, v. 24, n. 2, p. 255–263, 1994. CORLESS, R. M.; GONNET, G. H.; HARE, D. E.; JEFFREY, D. J.; KNUTH, D. E. lambert w function. Advances Computational mathematics, Springer, v. 5, p. 329–359, 1996.","code":""},{"path":[]},{"path":"/reference/fgp_pg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Probability generating function of the Geometric Poisson distribution — fgp_pg","text":"","code":"fgp_pg(c(0.1, 0.2, 0.3), 2, 0.5) #> [1] 0.3916373 0.4187066 0.4498768"},{"path":"/reference/hazard_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Numerical hazard function — hazard_function","title":"Numerical hazard function — hazard_function","text":"function calculates hazard function based given probability density function (pdf). hazard function represents instantaneous rate event occurs specific time, given event occurred time.","code":""},{"path":"/reference/hazard_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Numerical hazard function — hazard_function","text":"","code":"hazard_function(pdf)"},{"path":"/reference/hazard_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Numerical hazard function — hazard_function","text":"pdf probability density function used model survival time.","code":""},{"path":"/reference/hazard_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Numerical hazard function — hazard_function","text":"function calculates hazard function given time.","code":""},{"path":"/reference/hazard_function.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Numerical hazard function — hazard_function","text":"hazard function calculated ratio probability density function survival function. hazard function useful understanding instantaneous rate occurrence event specific time. hazard function also used model instantaneous rate occurrence event survival analysis. Just like function survival_function(), hazard_function() function vectorized \\(t\\), allows calculation hazard function vector times. hazard function defined : \\(h(t) = \\frac{f_T(t)}{S_T(t)},\\) \\(f_T(t)\\) probability density function \\(S_T(t)\\) survival function time \\(t\\).","code":""},{"path":"/reference/hazard_function.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Numerical hazard function — hazard_function","text":"NADARAJAH, Saralees; KOTZ, Samuel. beta exponential distribution. Reliability engineering & system safety, v. 91, n. 6, p. 689-697, 2006.","code":""},{"path":[]},{"path":"/reference/hazard_function.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Numerical hazard function — hazard_function","text":"","code":"# Saraless Nadarajah and Samnuel Kotz (2006) beta_exponential <- function(x, a, b, lambda){  lambda / beta(a, b) * exp(-b * lambda * x) * (1 - exp(-lambda * x))^(a - 1) }  hazard_beta_exponential <- hazard_function(beta_exponential)  hazard_beta_exponential(   t = seq(0.001, 1.5, length.out = 50L),   a = 1.5,   b = 1.8,   lambda = 1.5 ) #>  [1] 0.1883102 0.9840887 1.3021254 1.5119839 1.6667616 1.7876074 1.8854069 #>  [8] 1.9665682 2.0351987 2.0940896 2.1452239 2.1900584 2.2296930 2.2649769 #> [15] 2.2965791 2.3250336 2.3507737 2.3741547 2.3954716 2.4149712 2.4328620 #> [22] 2.4493213 2.4645012 2.4785329 2.4915300 2.5035918 2.5148037 2.5252451 #> [29] 2.5349825 2.5440758 2.5525787 2.5605390 2.5679998 2.5749997 2.5815736 #> [36] 2.5877530 2.5935667 2.5990406 2.6041986 2.6090622 2.6136515 2.6179844 #> [43] 2.6220779 2.6259472 2.6296067 2.6330693 2.6363472 2.6394517 2.6423931 #> [50] 2.6451811 #> attr(,\"time\") #>  [1] 0.00100000 0.03159184 0.06218367 0.09277551 0.12336735 0.15395918 #>  [7] 0.18455102 0.21514286 0.24573469 0.27632653 0.30691837 0.33751020 #> [13] 0.36810204 0.39869388 0.42928571 0.45987755 0.49046939 0.52106122 #> [19] 0.55165306 0.58224490 0.61283673 0.64342857 0.67402041 0.70461224 #> [25] 0.73520408 0.76579592 0.79638776 0.82697959 0.85757143 0.88816327 #> [31] 0.91875510 0.94934694 0.97993878 1.01053061 1.04112245 1.07171429 #> [37] 1.10230612 1.13289796 1.16348980 1.19408163 1.22467347 1.25526531 #> [43] 1.28585714 1.31644898 1.34704082 1.37763265 1.40822449 1.43881633 #> [49] 1.46940816 1.50000000 #> attr(,\"class\") #> [1] \"hazard_function\""},{"path":"/reference/log_likelihood.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the log-likelihood of a probability density function (pdf). — log_likelihood","title":"Calculate the log-likelihood of a probability density function (pdf). — log_likelihood","text":"function calculates log-likelihood given probability density function (pdf) using negative sum logarithm pdf evaluated value t.","code":""},{"path":"/reference/log_likelihood.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the log-likelihood of a probability density function (pdf). — log_likelihood","text":"","code":"log_likelihood(pdf)"},{"path":"/reference/log_likelihood.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the log-likelihood of a probability density function (pdf). — log_likelihood","text":"pdf probability density function.","code":""},{"path":"/reference/log_likelihood.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the log-likelihood of a probability density function (pdf). — log_likelihood","text":"log-likelihood function.","code":""},{"path":"/reference/pdf_fragility_zmpg.html","id":null,"dir":"Reference","previous_headings":"","what":"Zero-Modified Generalized Poisson Discrete Frailty Model — pdf_fragility_zmpg","title":"Zero-Modified Generalized Poisson Discrete Frailty Model — pdf_fragility_zmpg","text":"function constructs probability density function discrete frailty model continuous random variable \\(T\\) base density.","code":""},{"path":"/reference/pdf_fragility_zmpg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zero-Modified Generalized Poisson Discrete Frailty Model — pdf_fragility_zmpg","text":"","code":"pdf_fragility_zmpg(pdf)"},{"path":"/reference/pdf_fragility_zmpg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zero-Modified Generalized Poisson Discrete Frailty Model — pdf_fragility_zmpg","text":"pdf base probability density function.","code":""},{"path":"/reference/pdf_fragility_zmpg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zero-Modified Generalized Poisson Discrete Frailty Model — pdf_fragility_zmpg","text":"Calculates improper density random variable \\(T\\) follows forward discrete frailty model \\(f\\).","code":""},{"path":"/reference/pdf_fragility_zmpg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Zero-Modified Generalized Poisson Discrete Frailty Model — pdf_fragility_zmpg","text":"probability density function random variable \\(T\\) requires base survival function hazard function, .e., \\(S_0(t)\\) \\(h_0(t)\\), respectively. However, necessary inform base density function argument pdf. Internally, function pdf_fragility_zmpg() calculate \\(S_0(t)\\) \\(h_0(t)\\). probability density function \\(T\\) said discrete frailty model. \\(T\\) continuous random variable, density (frailty model) obtained discrete random variable \\(Z\\) follows Zero-Modified Generalized Poisson - ZMPG distribution, \\(Z \\sim ZMPG(\\mu, \\phi, \\rho)\\). probability density function frailty model given : \\( f_T(t) = -\\frac{\\rho h_0(t) e^{-\\frac{1}{\\phi}\\left[W\\left(-\\frac{\\mu\\phi}{1 + \\mu\\phi}S_0(t) e^{-\\frac{\\mu\\phi}{1 + \\mu\\phi}}\\right) + \\frac{\\mu\\phi}{1 + \\mu\\phi}\\right]}}{\\phi}\\frac{W\\left(-\\frac{\\mu\\phi}{1 + \\mu\\phi}S_0(t)e^{-\\frac{\\mu\\phi}{1 + \\mu\\phi}}\\right)}{1 + W\\left(-\\frac{\\mu\\phi}{1 + \\mu\\phi}S_0(t)e^{-\\frac{\\mu\\phi}{1 + \\mu\\phi}}\\right)},\\) \\(t>0\\), \\(\\mu>0\\), \\(\\phi \\geq 0\\) \\(\\rho \\geq 0\\).","code":""},{"path":[]},{"path":"/reference/pdf_fragility_zmpg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Zero-Modified Generalized Poisson Discrete Frailty Model — pdf_fragility_zmpg","text":"","code":"zmpg_weibull <- pdf_fragility_zmpg(pdf = dweibull) zmpg_weibull(t = 1, mu = 1, phi = 1, rho = 0.5, shape = 0.5, scale = 1.2) #> [1] 0.0259236 #> attr(,\"time\") #> [1] 1 #> attr(,\"class\") #> [1] \"pdf_fragility_zmpg\""},{"path":"/reference/pf_pg.html","id":null,"dir":"Reference","previous_headings":"","what":"Probability function of a random variable with Generalized Poisson distribution — pf_pg","title":"Probability function of a random variable with Generalized Poisson distribution — pf_pg","text":"Probability function random variable Generalized Poisson distribution","code":""},{"path":"/reference/pf_pg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Probability function of a random variable with Generalized Poisson distribution — pf_pg","text":"","code":"pf_pg(y, mu, phi)"},{"path":"/reference/pf_pg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Probability function of a random variable with Generalized Poisson distribution — pf_pg","text":"y Vector integer values, \\(y \\geq 0\\). mu mean parameter, \\(\\mu > 0\\). phi dispersion parameter, \\(\\phi \\geq 0\\).","code":""},{"path":"/reference/pf_pg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Probability function of a random variable with Generalized Poisson distribution — pf_pg","text":"Probability value \\(Y = y\\).","code":""},{"path":"/reference/pf_pg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Probability function of a random variable with Generalized Poisson distribution — pf_pg","text":"probability function random variable \\(Y\\) Generalized Poisson distribution expressed : $$\\pi(y; \\mu, \\phi) = \\frac{\\frac{(1 + \\phi y)^{y-1}}{y!} \\left[\\frac{\\mu e^{-\\mu\\phi(1 + \\mu\\phi)^{-1}}}{1 + \\mu\\phi}\\right]^y}{e^{\\mu(1 + \\mu\\phi)^{-1}}},\\,\\, y = 0, 1, 2, \\ldots,$$ \\(\\mu>0\\) \\(\\phi \\geq 0\\).","code":""},{"path":"/reference/pf_pg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Probability function of a random variable with Generalized Poisson distribution — pf_pg","text":"","code":"pf_pg(0:100, 3, 0.5) |> sum() #> [1] 0.9999998"},{"path":"/reference/plot.cdf_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Cumulative Distribution Function — plot.cdf_function","title":"Plot Cumulative Distribution Function — plot.cdf_function","text":"function plots cumulative distribution function (CDF) given dataset.","code":""},{"path":"/reference/plot.cdf_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Cumulative Distribution Function — plot.cdf_function","text":"","code":"# S3 method for cdf_function plot(x, ...)"},{"path":"/reference/plot.cdf_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Cumulative Distribution Function — plot.cdf_function","text":"x numeric vector representing dataset. ... Additional arguments passed ggplot function.","code":""},{"path":"/reference/plot.cdf_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Cumulative Distribution Function — plot.cdf_function","text":"ggplot object displaying CDF plot.","code":""},{"path":"/reference/plot.cdf_function.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Cumulative Distribution Function — plot.cdf_function","text":"","code":"cdf_weibull <- cdf_function(dweibull) plot(cdf_weibull(0:10, shape = 2, scale = 1))"},{"path":"/reference/plot.hazard_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot of the hazard function — plot.hazard_function","title":"Plot of the hazard function — plot.hazard_function","text":"Constructs plot hazard function object hazard_function class.","code":""},{"path":"/reference/plot.hazard_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot of the hazard function — plot.hazard_function","text":"","code":"# S3 method for hazard_function plot(x, ...)"},{"path":"/reference/plot.hazard_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot of the hazard function — plot.hazard_function","text":"x numeric vector representing dataset. ... Additional arguments passed ggplot function.","code":""},{"path":"/reference/plot.hazard_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot of the hazard function — plot.hazard_function","text":"ggplot object displaying hazard function plot.","code":""},{"path":"/reference/plot.hazard_function.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Plot of the hazard function — plot.hazard_function","text":"NADARAJAH, Saralees; KOTZ, Samuel. beta exponential distribution. Reliability engineering & system safety, v. 91, n. 6, p. 689-697, 2006.","code":""},{"path":"/reference/plot.hazard_function.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot of the hazard function — plot.hazard_function","text":"","code":"# Saraless Nadarajah and Samnuel Kotz (2006) beta_exponential <- function(x, a, b, lambda){  lambda / beta(a, b) * exp(-b * lambda * x) * (1 - exp(-lambda * x))^(a - 1) }  hazard_beta_exponential <- hazard_function(beta_exponential)  hazard_beta_exponential(   t = seq(0.001, 1.5, length.out = 100L),   a = 1.5,   b = 1.8,   lambda = 1.5 ) |> plot()"},{"path":"/reference/plot.pdf_fragility_zmpg.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot of the probability density function (PDF) of ZMPG frailty. — plot.pdf_fragility_zmpg","title":"Plot of the probability density function (PDF) of ZMPG frailty. — plot.pdf_fragility_zmpg","text":"Constructs plot probability density function (PDF) ZMPG frailty.","code":""},{"path":"/reference/plot.pdf_fragility_zmpg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot of the probability density function (PDF) of ZMPG frailty. — plot.pdf_fragility_zmpg","text":"","code":"# S3 method for pdf_fragility_zmpg plot(x, ...)"},{"path":"/reference/plot.pdf_fragility_zmpg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot of the probability density function (PDF) of ZMPG frailty. — plot.pdf_fragility_zmpg","text":"x numeric vector representing dataset. ... Additional arguments passed ggplot function.","code":""},{"path":"/reference/plot.pdf_fragility_zmpg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot of the probability density function (PDF) of ZMPG frailty. — plot.pdf_fragility_zmpg","text":"ggplot object displaying PDF plot.","code":""},{"path":"/reference/plot.pdf_fragility_zmpg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot of the probability density function (PDF) of ZMPG frailty. — plot.pdf_fragility_zmpg","text":"","code":"zmpg_weibull <- pdf_fragility_zmpg(pdf = dweibull) zmpg_weibull(   t = seq(0.001, 0.5, length.out = 100L),   mu = 0.7,   phi = 0.6,   rho = 0.1,   shape = 0.5,   scale = 1.2 ) |> plot()"},{"path":"/reference/plot.survival_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot of the survival function — plot.survival_function","title":"Plot of the survival function — plot.survival_function","text":"Constructs plot survival function object survival_function class.","code":""},{"path":"/reference/plot.survival_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot of the survival function — plot.survival_function","text":"","code":"# S3 method for survival_function plot(x, ...)"},{"path":"/reference/plot.survival_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot of the survival function — plot.survival_function","text":"x numeric vector representing dataset. ... Additional arguments passed ggplot function.","code":""},{"path":"/reference/plot.survival_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot of the survival function — plot.survival_function","text":"ggplot object displaying survival function plot.","code":""},{"path":"/reference/plot.survival_function.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot of the survival function — plot.survival_function","text":"","code":"survival_weibull <- survival_function(dweibull) plot(survival_weibull(0:10, shape = 2, scale = 1))"},{"path":"/reference/survival_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Numerical survival function — survival_function","title":"Numerical survival function — survival_function","text":"Constructs numerical survival function probability density function.","code":""},{"path":"/reference/survival_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Numerical survival function — survival_function","text":"","code":"survival_function(pdf)"},{"path":"/reference/survival_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Numerical survival function — survival_function","text":"pdf probability density function.","code":""},{"path":"/reference/survival_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Numerical survival function — survival_function","text":"Returns numerical value survival time \\(t\\).","code":""},{"path":"/reference/survival_function.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Numerical survival function — survival_function","text":"function survival_function() returns function terms \\(t\\) additional parameters probability density function passed argument pdf. returned function calculates survival numerically, making implementation survival functions quick. returned function vectorized \\(t\\), , vector time instances can passed argument. survival function returned survival_function() also t0 argument defaults t0 = 0. t0 argument initial time calculation survival function. t0 argument useful calculating survival function start time different zero. cases, change default value t0. function returned survival_function() also argument asymptotic_quantile = 30, defaults 30. argument responsible evaluating survival function 30th quantile, providing good approximation cure fraction. numerical evaluation, depending complexity base probability density function, may asymptotic_quantile = 30 produces error, requiring value asymptotic_quantile changed.","code":""},{"path":"/reference/survival_function.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Numerical survival function — survival_function","text":"NADARAJAH, Saralees; KOTZ, Samuel. beta exponential distribution. Reliability engineering & system safety, v. 91, n. 6, p. 689-697, 2006.","code":""},{"path":[]},{"path":"/reference/survival_function.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Numerical survival function — survival_function","text":"","code":"survival_weibull <- survival_function(dweibull) survival_weibull(0:10, shape = 2, scale = 1, asymptotic_quantile = 30) #>  [1] 1.000000e+00 3.678794e-01 1.831564e-02 1.234098e-04 1.125352e-07 #>  [6] 1.392675e-11 0.000000e+00 1.110223e-16 0.000000e+00 5.218048e-15 #> [11] 3.885781e-14 #> attr(,\"time\") #>  [1]  0  1  2  3  4  5  6  7  8  9 10 #> attr(,\"cure_fraction\") #> [1] 0 #> attr(,\"class\") #> [1] \"survival_function\"  # The user can also define any density # Saraless Nadarajah and Samnuel Kotz (2006) beta_exponential <- function(x, a, b, lambda){  lambda / beta(a, b) * exp(-b * lambda * x) * (1 - exp(-lambda * x))^(a - 1) } survival_beta_exponential <- survival_function(beta_exponential) survival_beta_exponential(   t = seq(0.01, 1.5, length.out = 20L),   a = 1.5,   b = 1.8,   lambda = 1.5 ) #>  [1] 0.99609097 0.91082931 0.79861387 0.68589560 0.58145868 0.48847323 #>  [7] 0.40762323 0.33841738 0.27983026 0.23063664 0.18958810 0.15550403 #> [13] 0.12731374 0.10407270 0.08496250 0.06928346 0.05644330 0.04594448 #> [19] 0.03737152 0.03037915 #> attr(,\"time\") #>  [1] 0.01000000 0.08842105 0.16684211 0.24526316 0.32368421 0.40210526 #>  [7] 0.48052632 0.55894737 0.63736842 0.71578947 0.79421053 0.87263158 #> [13] 0.95105263 1.02947368 1.10789474 1.18631579 1.26473684 1.34315789 #> [19] 1.42157895 1.50000000 #> attr(,\"cure_fraction\") #> [1] 4.893063e-08 #> attr(,\"class\") #> [1] \"survival_function\"  # Sobrevivencia do modelo de fragilidade descreta ZMPG fragility_model <- pdf_fragility_zmpg(pdf = dweibull) fragility_survival <- survival_function(fragility_model) fragility_survival(   t = seq(0.001, 4, length.out = 50L),   shape = 1.3,   scale = 1.2,   mu = 3.7,   rho = 1.5,   phi = 2.5,   asymptotic_quantile = 30  ) |> plot()"}]
